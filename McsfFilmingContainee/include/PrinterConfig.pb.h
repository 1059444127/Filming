// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrinterConfig.proto

#ifndef PROTOBUF_PrinterConfig_2eproto__INCLUDED
#define PROTOBUF_PrinterConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "FilmingJob.pb.h"
// @@protoc_insertion_point(includes)

namespace Mcsf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PrinterConfig_2eproto();
void protobuf_AssignDesc_PrinterConfig_2eproto();
void protobuf_ShutdownFile_PrinterConfig_2eproto();

class FilmingPrinterList;
class FilmingPrinterList_Printer;

// ===================================================================

class FilmingPrinterList_Printer : public ::google::protobuf::Message {
 public:
  FilmingPrinterList_Printer();
  virtual ~FilmingPrinterList_Printer();
  
  FilmingPrinterList_Printer(const FilmingPrinterList_Printer& from);
  
  inline FilmingPrinterList_Printer& operator=(const FilmingPrinterList_Printer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilmingPrinterList_Printer& default_instance();
  
  void Swap(FilmingPrinterList_Printer* other);
  
  // implements Message ----------------------------------------------
  
  FilmingPrinterList_Printer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilmingPrinterList_Printer& from);
  void MergeFrom(const FilmingPrinterList_Printer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string printer_ID = 1;
  inline bool has_printer_id() const;
  inline void clear_printer_id();
  static const int kPrinterIDFieldNumber = 1;
  inline const ::std::string& printer_id() const;
  inline void set_printer_id(const ::std::string& value);
  inline void set_printer_id(const char* value);
  inline void set_printer_id(const char* value, size_t size);
  inline ::std::string* mutable_printer_id();
  inline ::std::string* release_printer_id();
  
  // optional string printer_AE = 2;
  inline bool has_printer_ae() const;
  inline void clear_printer_ae();
  static const int kPrinterAEFieldNumber = 2;
  inline const ::std::string& printer_ae() const;
  inline void set_printer_ae(const ::std::string& value);
  inline void set_printer_ae(const char* value);
  inline void set_printer_ae(const char* value, size_t size);
  inline ::std::string* mutable_printer_ae();
  inline ::std::string* release_printer_ae();
  
  // optional string printer_IP = 3;
  inline bool has_printer_ip() const;
  inline void clear_printer_ip();
  static const int kPrinterIPFieldNumber = 3;
  inline const ::std::string& printer_ip() const;
  inline void set_printer_ip(const ::std::string& value);
  inline void set_printer_ip(const char* value);
  inline void set_printer_ip(const char* value, size_t size);
  inline ::std::string* mutable_printer_ip();
  inline ::std::string* release_printer_ip();
  
  // optional int32 printer_port = 4;
  inline bool has_printer_port() const;
  inline void clear_printer_port();
  static const int kPrinterPortFieldNumber = 4;
  inline ::google::protobuf::int32 printer_port() const;
  inline void set_printer_port(::google::protobuf::int32 value);
  
  // optional string description = 5;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string printer_type = 6;
  inline bool has_printer_type() const;
  inline void clear_printer_type();
  static const int kPrinterTypeFieldNumber = 6;
  inline const ::std::string& printer_type() const;
  inline void set_printer_type(const ::std::string& value);
  inline void set_printer_type(const char* value);
  inline void set_printer_type(const char* value, size_t size);
  inline ::std::string* mutable_printer_type();
  inline ::std::string* release_printer_type();
  
  // repeated string border_density = 7;
  inline int border_density_size() const;
  inline void clear_border_density();
  static const int kBorderDensityFieldNumber = 7;
  inline const ::std::string& border_density(int index) const;
  inline ::std::string* mutable_border_density(int index);
  inline void set_border_density(int index, const ::std::string& value);
  inline void set_border_density(int index, const char* value);
  inline void set_border_density(int index, const char* value, size_t size);
  inline ::std::string* add_border_density();
  inline void add_border_density(const ::std::string& value);
  inline void add_border_density(const char* value);
  inline void add_border_density(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& border_density() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_border_density();
  
  // optional bool is_disable_new_VRs = 8;
  inline bool has_is_disable_new_vrs() const;
  inline void clear_is_disable_new_vrs();
  static const int kIsDisableNewVRsFieldNumber = 8;
  inline bool is_disable_new_vrs() const;
  inline void set_is_disable_new_vrs(bool value);
  
  // repeated string layout = 9;
  inline int layout_size() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 9;
  inline const ::std::string& layout(int index) const;
  inline ::std::string* mutable_layout(int index);
  inline void set_layout(int index, const ::std::string& value);
  inline void set_layout(int index, const char* value);
  inline void set_layout(int index, const char* value, size_t size);
  inline ::std::string* add_layout();
  inline void add_layout(const ::std::string& value);
  inline void add_layout(const char* value);
  inline void add_layout(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& layout() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_layout();
  
  // repeated string EmptyImageDensity = 10;
  inline int emptyimagedensity_size() const;
  inline void clear_emptyimagedensity();
  static const int kEmptyImageDensityFieldNumber = 10;
  inline const ::std::string& emptyimagedensity(int index) const;
  inline ::std::string* mutable_emptyimagedensity(int index);
  inline void set_emptyimagedensity(int index, const ::std::string& value);
  inline void set_emptyimagedensity(int index, const char* value);
  inline void set_emptyimagedensity(int index, const char* value, size_t size);
  inline ::std::string* add_emptyimagedensity();
  inline void add_emptyimagedensity(const ::std::string& value);
  inline void add_emptyimagedensity(const char* value);
  inline void add_emptyimagedensity(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& emptyimagedensity() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_emptyimagedensity();
  
  // repeated string film_destination = 11;
  inline int film_destination_size() const;
  inline void clear_film_destination();
  static const int kFilmDestinationFieldNumber = 11;
  inline const ::std::string& film_destination(int index) const;
  inline ::std::string* mutable_film_destination(int index);
  inline void set_film_destination(int index, const ::std::string& value);
  inline void set_film_destination(int index, const char* value);
  inline void set_film_destination(int index, const char* value, size_t size);
  inline ::std::string* add_film_destination();
  inline void add_film_destination(const ::std::string& value);
  inline void add_film_destination(const char* value);
  inline void add_film_destination(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& film_destination() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_film_destination();
  
  // repeated string film_size = 12;
  inline int film_size_size() const;
  inline void clear_film_size();
  static const int kFilmSizeFieldNumber = 12;
  inline const ::std::string& film_size(int index) const;
  inline ::std::string* mutable_film_size(int index);
  inline void set_film_size(int index, const ::std::string& value);
  inline void set_film_size(int index, const char* value);
  inline void set_film_size(int index, const char* value, size_t size);
  inline ::std::string* add_film_size();
  inline void add_film_size(const ::std::string& value);
  inline void add_film_size(const char* value);
  inline void add_film_size(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& film_size() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_film_size();
  
  // optional bool is_implicit_only = 13;
  inline bool has_is_implicit_only() const;
  inline void clear_is_implicit_only();
  static const int kIsImplicitOnlyFieldNumber = 13;
  inline bool is_implicit_only() const;
  inline void set_is_implicit_only(bool value);
  
  // repeated string magnification_type = 14;
  inline int magnification_type_size() const;
  inline void clear_magnification_type();
  static const int kMagnificationTypeFieldNumber = 14;
  inline const ::std::string& magnification_type(int index) const;
  inline ::std::string* mutable_magnification_type(int index);
  inline void set_magnification_type(int index, const ::std::string& value);
  inline void set_magnification_type(int index, const char* value);
  inline void set_magnification_type(int index, const char* value, size_t size);
  inline ::std::string* add_magnification_type();
  inline void add_magnification_type(const ::std::string& value);
  inline void add_magnification_type(const char* value);
  inline void add_magnification_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& magnification_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_magnification_type();
  
  // optional int32 max_density = 15;
  inline bool has_max_density() const;
  inline void clear_max_density();
  static const int kMaxDensityFieldNumber = 15;
  inline ::google::protobuf::int32 max_density() const;
  inline void set_max_density(::google::protobuf::int32 value);
  
  // optional int64 max_PDU = 16;
  inline bool has_max_pdu() const;
  inline void clear_max_pdu();
  static const int kMaxPDUFieldNumber = 16;
  inline ::google::protobuf::int64 max_pdu() const;
  inline void set_max_pdu(::google::protobuf::int64 value);
  
  // repeated string medium_type = 17;
  inline int medium_type_size() const;
  inline void clear_medium_type();
  static const int kMediumTypeFieldNumber = 17;
  inline const ::std::string& medium_type(int index) const;
  inline ::std::string* mutable_medium_type(int index);
  inline void set_medium_type(int index, const ::std::string& value);
  inline void set_medium_type(int index, const char* value);
  inline void set_medium_type(int index, const char* value, size_t size);
  inline ::std::string* add_medium_type();
  inline void add_medium_type(const ::std::string& value);
  inline void add_medium_type(const char* value);
  inline void add_medium_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& medium_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_medium_type();
  
  // optional int32 min_density = 18;
  inline bool has_min_density() const;
  inline void clear_min_density();
  static const int kMinDensityFieldNumber = 18;
  inline ::google::protobuf::int32 min_density() const;
  inline void set_min_density(::google::protobuf::int32 value);
  
  // optional bool is_omit_SOP_class_UID_from_create_response = 19;
  inline bool has_is_omit_sop_class_uid_from_create_response() const;
  inline void clear_is_omit_sop_class_uid_from_create_response();
  static const int kIsOmitSOPClassUIDFromCreateResponseFieldNumber = 19;
  inline bool is_omit_sop_class_uid_from_create_response() const;
  inline void set_is_omit_sop_class_uid_from_create_response(bool value);
  
  // optional bool is_presentation_LUT_match_required = 20;
  inline bool has_is_presentation_lut_match_required() const;
  inline void clear_is_presentation_lut_match_required();
  static const int kIsPresentationLUTMatchRequiredFieldNumber = 20;
  inline bool is_presentation_lut_match_required() const;
  inline void set_is_presentation_lut_match_required(bool value);
  
  // optional bool is_presentation_LUT_in_film_session = 21;
  inline bool has_is_presentation_lut_in_film_session() const;
  inline void clear_is_presentation_lut_in_film_session();
  static const int kIsPresentationLUTInFilmSessionFieldNumber = 21;
  inline bool is_presentation_lut_in_film_session() const;
  inline void set_is_presentation_lut_in_film_session(bool value);
  
  // repeated string resolution_ID = 22;
  inline int resolution_id_size() const;
  inline void clear_resolution_id();
  static const int kResolutionIDFieldNumber = 22;
  inline const ::std::string& resolution_id(int index) const;
  inline ::std::string* mutable_resolution_id(int index);
  inline void set_resolution_id(int index, const ::std::string& value);
  inline void set_resolution_id(int index, const char* value);
  inline void set_resolution_id(int index, const char* value, size_t size);
  inline ::std::string* add_resolution_id();
  inline void add_resolution_id(const ::std::string& value);
  inline void add_resolution_id(const char* value);
  inline void add_resolution_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resolution_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resolution_id();
  
  // repeated string smoothing_type = 23;
  inline int smoothing_type_size() const;
  inline void clear_smoothing_type();
  static const int kSmoothingTypeFieldNumber = 23;
  inline const ::std::string& smoothing_type(int index) const;
  inline ::std::string* mutable_smoothing_type(int index);
  inline void set_smoothing_type(int index, const ::std::string& value);
  inline void set_smoothing_type(int index, const char* value);
  inline void set_smoothing_type(int index, const char* value, size_t size);
  inline ::std::string* add_smoothing_type();
  inline void add_smoothing_type(const ::std::string& value);
  inline void add_smoothing_type(const char* value);
  inline void add_smoothing_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& smoothing_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smoothing_type();
  
  // optional bool is_support_12_bit = 24;
  inline bool has_is_support_12_bit() const;
  inline void clear_is_support_12_bit();
  static const int kIsSupport12BitFieldNumber = 24;
  inline bool is_support_12_bit() const;
  inline void set_is_support_12_bit(bool value);
  
  // optional bool is_support_decimate_crop = 25;
  inline bool has_is_support_decimate_crop() const;
  inline void clear_is_support_decimate_crop();
  static const int kIsSupportDecimateCropFieldNumber = 25;
  inline bool is_support_decimate_crop() const;
  inline void set_is_support_decimate_crop(bool value);
  
  // optional bool is_support_image_size = 26;
  inline bool has_is_support_image_size() const;
  inline void clear_is_support_image_size();
  static const int kIsSupportImageSizeFieldNumber = 26;
  inline bool is_support_image_size() const;
  inline void set_is_support_image_size(bool value);
  
  // optional bool is_support_presentation_LUT = 27;
  inline bool has_is_support_presentation_lut() const;
  inline void clear_is_support_presentation_lut();
  static const int kIsSupportPresentationLUTFieldNumber = 27;
  inline bool is_support_presentation_lut() const;
  inline void set_is_support_presentation_lut(bool value);
  
  // optional bool is_support_trim = 28;
  inline bool has_is_support_trim() const;
  inline void clear_is_support_trim();
  static const int kIsSupportTrimFieldNumber = 28;
  inline bool is_support_trim() const;
  inline void set_is_support_trim(bool value);
  
  // optional string RootDir = 29;
  inline bool has_rootdir() const;
  inline void clear_rootdir();
  static const int kRootDirFieldNumber = 29;
  inline const ::std::string& rootdir() const;
  inline void set_rootdir(const ::std::string& value);
  inline void set_rootdir(const char* value);
  inline void set_rootdir(const char* value, size_t size);
  inline ::std::string* mutable_rootdir();
  inline ::std::string* release_rootdir();
  
  // @@protoc_insertion_point(class_scope:Mcsf.FilmingPrinterList.Printer)
 private:
  inline void set_has_printer_id();
  inline void clear_has_printer_id();
  inline void set_has_printer_ae();
  inline void clear_has_printer_ae();
  inline void set_has_printer_ip();
  inline void clear_has_printer_ip();
  inline void set_has_printer_port();
  inline void clear_has_printer_port();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_printer_type();
  inline void clear_has_printer_type();
  inline void set_has_is_disable_new_vrs();
  inline void clear_has_is_disable_new_vrs();
  inline void set_has_is_implicit_only();
  inline void clear_has_is_implicit_only();
  inline void set_has_max_density();
  inline void clear_has_max_density();
  inline void set_has_max_pdu();
  inline void clear_has_max_pdu();
  inline void set_has_min_density();
  inline void clear_has_min_density();
  inline void set_has_is_omit_sop_class_uid_from_create_response();
  inline void clear_has_is_omit_sop_class_uid_from_create_response();
  inline void set_has_is_presentation_lut_match_required();
  inline void clear_has_is_presentation_lut_match_required();
  inline void set_has_is_presentation_lut_in_film_session();
  inline void clear_has_is_presentation_lut_in_film_session();
  inline void set_has_is_support_12_bit();
  inline void clear_has_is_support_12_bit();
  inline void set_has_is_support_decimate_crop();
  inline void clear_has_is_support_decimate_crop();
  inline void set_has_is_support_image_size();
  inline void clear_has_is_support_image_size();
  inline void set_has_is_support_presentation_lut();
  inline void clear_has_is_support_presentation_lut();
  inline void set_has_is_support_trim();
  inline void clear_has_is_support_trim();
  inline void set_has_rootdir();
  inline void clear_has_rootdir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* printer_id_;
  ::std::string* printer_ae_;
  ::std::string* printer_ip_;
  ::std::string* description_;
  ::std::string* printer_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> border_density_;
  ::google::protobuf::RepeatedPtrField< ::std::string> layout_;
  ::google::protobuf::int32 printer_port_;
  ::google::protobuf::int32 max_density_;
  ::google::protobuf::RepeatedPtrField< ::std::string> emptyimagedensity_;
  ::google::protobuf::RepeatedPtrField< ::std::string> film_destination_;
  ::google::protobuf::RepeatedPtrField< ::std::string> film_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> magnification_type_;
  bool is_disable_new_vrs_;
  bool is_implicit_only_;
  bool is_omit_sop_class_uid_from_create_response_;
  bool is_presentation_lut_match_required_;
  ::google::protobuf::int32 min_density_;
  ::google::protobuf::int64 max_pdu_;
  ::google::protobuf::RepeatedPtrField< ::std::string> medium_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resolution_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smoothing_type_;
  bool is_presentation_lut_in_film_session_;
  bool is_support_12_bit_;
  bool is_support_decimate_crop_;
  bool is_support_image_size_;
  bool is_support_presentation_lut_;
  bool is_support_trim_;
  ::std::string* rootdir_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];
  
  friend void  protobuf_AddDesc_PrinterConfig_2eproto();
  friend void protobuf_AssignDesc_PrinterConfig_2eproto();
  friend void protobuf_ShutdownFile_PrinterConfig_2eproto();
  
  void InitAsDefaultInstance();
  static FilmingPrinterList_Printer* default_instance_;
};
// -------------------------------------------------------------------

class FilmingPrinterList : public ::google::protobuf::Message {
 public:
  FilmingPrinterList();
  virtual ~FilmingPrinterList();
  
  FilmingPrinterList(const FilmingPrinterList& from);
  
  inline FilmingPrinterList& operator=(const FilmingPrinterList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilmingPrinterList& default_instance();
  
  void Swap(FilmingPrinterList* other);
  
  // implements Message ----------------------------------------------
  
  FilmingPrinterList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilmingPrinterList& from);
  void MergeFrom(const FilmingPrinterList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FilmingPrinterList_Printer Printer;
  
  // accessors -------------------------------------------------------
  
  // optional .Mcsf.FilmingJobStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::Mcsf::FilmingJobStatus& status() const;
  inline ::Mcsf::FilmingJobStatus* mutable_status();
  inline ::Mcsf::FilmingJobStatus* release_status();
  
  // repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
  inline int printer_size() const;
  inline void clear_printer();
  static const int kPrinterFieldNumber = 2;
  inline const ::Mcsf::FilmingPrinterList_Printer& printer(int index) const;
  inline ::Mcsf::FilmingPrinterList_Printer* mutable_printer(int index);
  inline ::Mcsf::FilmingPrinterList_Printer* add_printer();
  inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmingPrinterList_Printer >&
      printer() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmingPrinterList_Printer >*
      mutable_printer();
  
  // @@protoc_insertion_point(class_scope:Mcsf.FilmingPrinterList)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Mcsf::FilmingJobStatus* status_;
  ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmingPrinterList_Printer > printer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_PrinterConfig_2eproto();
  friend void protobuf_AssignDesc_PrinterConfig_2eproto();
  friend void protobuf_ShutdownFile_PrinterConfig_2eproto();
  
  void InitAsDefaultInstance();
  static FilmingPrinterList* default_instance_;
};
// ===================================================================


// ===================================================================

// FilmingPrinterList_Printer

// optional string printer_ID = 1;
inline bool FilmingPrinterList_Printer::has_printer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_printer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilmingPrinterList_Printer::clear_has_printer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilmingPrinterList_Printer::clear_printer_id() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    printer_id_->clear();
  }
  clear_has_printer_id();
}
inline const ::std::string& FilmingPrinterList_Printer::printer_id() const {
  return *printer_id_;
}
inline void FilmingPrinterList_Printer::set_printer_id(const ::std::string& value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_id(const char* value) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_id(const char* value, size_t size) {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  printer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_printer_id() {
  set_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    printer_id_ = new ::std::string;
  }
  return printer_id_;
}
inline ::std::string* FilmingPrinterList_Printer::release_printer_id() {
  clear_has_printer_id();
  if (printer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_id_;
    printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_AE = 2;
inline bool FilmingPrinterList_Printer::has_printer_ae() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_printer_ae() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilmingPrinterList_Printer::clear_has_printer_ae() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilmingPrinterList_Printer::clear_printer_ae() {
  if (printer_ae_ != &::google::protobuf::internal::kEmptyString) {
    printer_ae_->clear();
  }
  clear_has_printer_ae();
}
inline const ::std::string& FilmingPrinterList_Printer::printer_ae() const {
  return *printer_ae_;
}
inline void FilmingPrinterList_Printer::set_printer_ae(const ::std::string& value) {
  set_has_printer_ae();
  if (printer_ae_ == &::google::protobuf::internal::kEmptyString) {
    printer_ae_ = new ::std::string;
  }
  printer_ae_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_ae(const char* value) {
  set_has_printer_ae();
  if (printer_ae_ == &::google::protobuf::internal::kEmptyString) {
    printer_ae_ = new ::std::string;
  }
  printer_ae_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_ae(const char* value, size_t size) {
  set_has_printer_ae();
  if (printer_ae_ == &::google::protobuf::internal::kEmptyString) {
    printer_ae_ = new ::std::string;
  }
  printer_ae_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_printer_ae() {
  set_has_printer_ae();
  if (printer_ae_ == &::google::protobuf::internal::kEmptyString) {
    printer_ae_ = new ::std::string;
  }
  return printer_ae_;
}
inline ::std::string* FilmingPrinterList_Printer::release_printer_ae() {
  clear_has_printer_ae();
  if (printer_ae_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_ae_;
    printer_ae_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_IP = 3;
inline bool FilmingPrinterList_Printer::has_printer_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_printer_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilmingPrinterList_Printer::clear_has_printer_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilmingPrinterList_Printer::clear_printer_ip() {
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    printer_ip_->clear();
  }
  clear_has_printer_ip();
}
inline const ::std::string& FilmingPrinterList_Printer::printer_ip() const {
  return *printer_ip_;
}
inline void FilmingPrinterList_Printer::set_printer_ip(const ::std::string& value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_ip(const char* value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_ip(const char* value, size_t size) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_printer_ip() {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  return printer_ip_;
}
inline ::std::string* FilmingPrinterList_Printer::release_printer_ip() {
  clear_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_ip_;
    printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 printer_port = 4;
inline bool FilmingPrinterList_Printer::has_printer_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_printer_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilmingPrinterList_Printer::clear_has_printer_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilmingPrinterList_Printer::clear_printer_port() {
  printer_port_ = 0;
  clear_has_printer_port();
}
inline ::google::protobuf::int32 FilmingPrinterList_Printer::printer_port() const {
  return printer_port_;
}
inline void FilmingPrinterList_Printer::set_printer_port(::google::protobuf::int32 value) {
  set_has_printer_port();
  printer_port_ = value;
}

// optional string description = 5;
inline bool FilmingPrinterList_Printer::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilmingPrinterList_Printer::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilmingPrinterList_Printer::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& FilmingPrinterList_Printer::description() const {
  return *description_;
}
inline void FilmingPrinterList_Printer::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FilmingPrinterList_Printer::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FilmingPrinterList_Printer::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* FilmingPrinterList_Printer::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_type = 6;
inline bool FilmingPrinterList_Printer::has_printer_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_printer_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FilmingPrinterList_Printer::clear_has_printer_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FilmingPrinterList_Printer::clear_printer_type() {
  if (printer_type_ != &::google::protobuf::internal::kEmptyString) {
    printer_type_->clear();
  }
  clear_has_printer_type();
}
inline const ::std::string& FilmingPrinterList_Printer::printer_type() const {
  return *printer_type_;
}
inline void FilmingPrinterList_Printer::set_printer_type(const ::std::string& value) {
  set_has_printer_type();
  if (printer_type_ == &::google::protobuf::internal::kEmptyString) {
    printer_type_ = new ::std::string;
  }
  printer_type_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_type(const char* value) {
  set_has_printer_type();
  if (printer_type_ == &::google::protobuf::internal::kEmptyString) {
    printer_type_ = new ::std::string;
  }
  printer_type_->assign(value);
}
inline void FilmingPrinterList_Printer::set_printer_type(const char* value, size_t size) {
  set_has_printer_type();
  if (printer_type_ == &::google::protobuf::internal::kEmptyString) {
    printer_type_ = new ::std::string;
  }
  printer_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_printer_type() {
  set_has_printer_type();
  if (printer_type_ == &::google::protobuf::internal::kEmptyString) {
    printer_type_ = new ::std::string;
  }
  return printer_type_;
}
inline ::std::string* FilmingPrinterList_Printer::release_printer_type() {
  clear_has_printer_type();
  if (printer_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_type_;
    printer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string border_density = 7;
inline int FilmingPrinterList_Printer::border_density_size() const {
  return border_density_.size();
}
inline void FilmingPrinterList_Printer::clear_border_density() {
  border_density_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::border_density(int index) const {
  return border_density_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_border_density(int index) {
  return border_density_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_border_density(int index, const ::std::string& value) {
  border_density_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_border_density(int index, const char* value) {
  border_density_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_border_density(int index, const char* value, size_t size) {
  border_density_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_border_density() {
  return border_density_.Add();
}
inline void FilmingPrinterList_Printer::add_border_density(const ::std::string& value) {
  border_density_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_border_density(const char* value) {
  border_density_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_border_density(const char* value, size_t size) {
  border_density_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::border_density() const {
  return border_density_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_border_density() {
  return &border_density_;
}

// optional bool is_disable_new_VRs = 8;
inline bool FilmingPrinterList_Printer::has_is_disable_new_vrs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_disable_new_vrs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FilmingPrinterList_Printer::clear_has_is_disable_new_vrs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FilmingPrinterList_Printer::clear_is_disable_new_vrs() {
  is_disable_new_vrs_ = false;
  clear_has_is_disable_new_vrs();
}
inline bool FilmingPrinterList_Printer::is_disable_new_vrs() const {
  return is_disable_new_vrs_;
}
inline void FilmingPrinterList_Printer::set_is_disable_new_vrs(bool value) {
  set_has_is_disable_new_vrs();
  is_disable_new_vrs_ = value;
}

// repeated string layout = 9;
inline int FilmingPrinterList_Printer::layout_size() const {
  return layout_.size();
}
inline void FilmingPrinterList_Printer::clear_layout() {
  layout_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::layout(int index) const {
  return layout_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_layout(int index) {
  return layout_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_layout(int index, const ::std::string& value) {
  layout_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_layout(int index, const char* value) {
  layout_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_layout(int index, const char* value, size_t size) {
  layout_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_layout() {
  return layout_.Add();
}
inline void FilmingPrinterList_Printer::add_layout(const ::std::string& value) {
  layout_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_layout(const char* value) {
  layout_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_layout(const char* value, size_t size) {
  layout_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::layout() const {
  return layout_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_layout() {
  return &layout_;
}

// repeated string EmptyImageDensity = 10;
inline int FilmingPrinterList_Printer::emptyimagedensity_size() const {
  return emptyimagedensity_.size();
}
inline void FilmingPrinterList_Printer::clear_emptyimagedensity() {
  emptyimagedensity_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::emptyimagedensity(int index) const {
  return emptyimagedensity_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_emptyimagedensity(int index) {
  return emptyimagedensity_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_emptyimagedensity(int index, const ::std::string& value) {
  emptyimagedensity_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_emptyimagedensity(int index, const char* value) {
  emptyimagedensity_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_emptyimagedensity(int index, const char* value, size_t size) {
  emptyimagedensity_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_emptyimagedensity() {
  return emptyimagedensity_.Add();
}
inline void FilmingPrinterList_Printer::add_emptyimagedensity(const ::std::string& value) {
  emptyimagedensity_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_emptyimagedensity(const char* value) {
  emptyimagedensity_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_emptyimagedensity(const char* value, size_t size) {
  emptyimagedensity_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::emptyimagedensity() const {
  return emptyimagedensity_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_emptyimagedensity() {
  return &emptyimagedensity_;
}

// repeated string film_destination = 11;
inline int FilmingPrinterList_Printer::film_destination_size() const {
  return film_destination_.size();
}
inline void FilmingPrinterList_Printer::clear_film_destination() {
  film_destination_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::film_destination(int index) const {
  return film_destination_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_film_destination(int index) {
  return film_destination_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_film_destination(int index, const ::std::string& value) {
  film_destination_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_film_destination(int index, const char* value) {
  film_destination_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_film_destination(int index, const char* value, size_t size) {
  film_destination_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_film_destination() {
  return film_destination_.Add();
}
inline void FilmingPrinterList_Printer::add_film_destination(const ::std::string& value) {
  film_destination_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_film_destination(const char* value) {
  film_destination_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_film_destination(const char* value, size_t size) {
  film_destination_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::film_destination() const {
  return film_destination_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_film_destination() {
  return &film_destination_;
}

// repeated string film_size = 12;
inline int FilmingPrinterList_Printer::film_size_size() const {
  return film_size_.size();
}
inline void FilmingPrinterList_Printer::clear_film_size() {
  film_size_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::film_size(int index) const {
  return film_size_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_film_size(int index) {
  return film_size_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_film_size(int index, const ::std::string& value) {
  film_size_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_film_size(int index, const char* value) {
  film_size_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_film_size(int index, const char* value, size_t size) {
  film_size_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_film_size() {
  return film_size_.Add();
}
inline void FilmingPrinterList_Printer::add_film_size(const ::std::string& value) {
  film_size_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_film_size(const char* value) {
  film_size_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_film_size(const char* value, size_t size) {
  film_size_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::film_size() const {
  return film_size_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_film_size() {
  return &film_size_;
}

// optional bool is_implicit_only = 13;
inline bool FilmingPrinterList_Printer::has_is_implicit_only() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_implicit_only() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_implicit_only() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FilmingPrinterList_Printer::clear_is_implicit_only() {
  is_implicit_only_ = false;
  clear_has_is_implicit_only();
}
inline bool FilmingPrinterList_Printer::is_implicit_only() const {
  return is_implicit_only_;
}
inline void FilmingPrinterList_Printer::set_is_implicit_only(bool value) {
  set_has_is_implicit_only();
  is_implicit_only_ = value;
}

// repeated string magnification_type = 14;
inline int FilmingPrinterList_Printer::magnification_type_size() const {
  return magnification_type_.size();
}
inline void FilmingPrinterList_Printer::clear_magnification_type() {
  magnification_type_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::magnification_type(int index) const {
  return magnification_type_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_magnification_type(int index) {
  return magnification_type_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_magnification_type(int index, const ::std::string& value) {
  magnification_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_magnification_type(int index, const char* value) {
  magnification_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_magnification_type(int index, const char* value, size_t size) {
  magnification_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_magnification_type() {
  return magnification_type_.Add();
}
inline void FilmingPrinterList_Printer::add_magnification_type(const ::std::string& value) {
  magnification_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_magnification_type(const char* value) {
  magnification_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_magnification_type(const char* value, size_t size) {
  magnification_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::magnification_type() const {
  return magnification_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_magnification_type() {
  return &magnification_type_;
}

// optional int32 max_density = 15;
inline bool FilmingPrinterList_Printer::has_max_density() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_max_density() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FilmingPrinterList_Printer::clear_has_max_density() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FilmingPrinterList_Printer::clear_max_density() {
  max_density_ = 0;
  clear_has_max_density();
}
inline ::google::protobuf::int32 FilmingPrinterList_Printer::max_density() const {
  return max_density_;
}
inline void FilmingPrinterList_Printer::set_max_density(::google::protobuf::int32 value) {
  set_has_max_density();
  max_density_ = value;
}

// optional int64 max_PDU = 16;
inline bool FilmingPrinterList_Printer::has_max_pdu() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_max_pdu() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FilmingPrinterList_Printer::clear_has_max_pdu() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FilmingPrinterList_Printer::clear_max_pdu() {
  max_pdu_ = GOOGLE_LONGLONG(0);
  clear_has_max_pdu();
}
inline ::google::protobuf::int64 FilmingPrinterList_Printer::max_pdu() const {
  return max_pdu_;
}
inline void FilmingPrinterList_Printer::set_max_pdu(::google::protobuf::int64 value) {
  set_has_max_pdu();
  max_pdu_ = value;
}

// repeated string medium_type = 17;
inline int FilmingPrinterList_Printer::medium_type_size() const {
  return medium_type_.size();
}
inline void FilmingPrinterList_Printer::clear_medium_type() {
  medium_type_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::medium_type(int index) const {
  return medium_type_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_medium_type(int index) {
  return medium_type_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_medium_type(int index, const ::std::string& value) {
  medium_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_medium_type(int index, const char* value) {
  medium_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_medium_type(int index, const char* value, size_t size) {
  medium_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_medium_type() {
  return medium_type_.Add();
}
inline void FilmingPrinterList_Printer::add_medium_type(const ::std::string& value) {
  medium_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_medium_type(const char* value) {
  medium_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_medium_type(const char* value, size_t size) {
  medium_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::medium_type() const {
  return medium_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_medium_type() {
  return &medium_type_;
}

// optional int32 min_density = 18;
inline bool FilmingPrinterList_Printer::has_min_density() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_min_density() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FilmingPrinterList_Printer::clear_has_min_density() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FilmingPrinterList_Printer::clear_min_density() {
  min_density_ = 0;
  clear_has_min_density();
}
inline ::google::protobuf::int32 FilmingPrinterList_Printer::min_density() const {
  return min_density_;
}
inline void FilmingPrinterList_Printer::set_min_density(::google::protobuf::int32 value) {
  set_has_min_density();
  min_density_ = value;
}

// optional bool is_omit_SOP_class_UID_from_create_response = 19;
inline bool FilmingPrinterList_Printer::has_is_omit_sop_class_uid_from_create_response() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_omit_sop_class_uid_from_create_response() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_omit_sop_class_uid_from_create_response() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FilmingPrinterList_Printer::clear_is_omit_sop_class_uid_from_create_response() {
  is_omit_sop_class_uid_from_create_response_ = false;
  clear_has_is_omit_sop_class_uid_from_create_response();
}
inline bool FilmingPrinterList_Printer::is_omit_sop_class_uid_from_create_response() const {
  return is_omit_sop_class_uid_from_create_response_;
}
inline void FilmingPrinterList_Printer::set_is_omit_sop_class_uid_from_create_response(bool value) {
  set_has_is_omit_sop_class_uid_from_create_response();
  is_omit_sop_class_uid_from_create_response_ = value;
}

// optional bool is_presentation_LUT_match_required = 20;
inline bool FilmingPrinterList_Printer::has_is_presentation_lut_match_required() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_presentation_lut_match_required() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_presentation_lut_match_required() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FilmingPrinterList_Printer::clear_is_presentation_lut_match_required() {
  is_presentation_lut_match_required_ = false;
  clear_has_is_presentation_lut_match_required();
}
inline bool FilmingPrinterList_Printer::is_presentation_lut_match_required() const {
  return is_presentation_lut_match_required_;
}
inline void FilmingPrinterList_Printer::set_is_presentation_lut_match_required(bool value) {
  set_has_is_presentation_lut_match_required();
  is_presentation_lut_match_required_ = value;
}

// optional bool is_presentation_LUT_in_film_session = 21;
inline bool FilmingPrinterList_Printer::has_is_presentation_lut_in_film_session() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_presentation_lut_in_film_session() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_presentation_lut_in_film_session() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FilmingPrinterList_Printer::clear_is_presentation_lut_in_film_session() {
  is_presentation_lut_in_film_session_ = false;
  clear_has_is_presentation_lut_in_film_session();
}
inline bool FilmingPrinterList_Printer::is_presentation_lut_in_film_session() const {
  return is_presentation_lut_in_film_session_;
}
inline void FilmingPrinterList_Printer::set_is_presentation_lut_in_film_session(bool value) {
  set_has_is_presentation_lut_in_film_session();
  is_presentation_lut_in_film_session_ = value;
}

// repeated string resolution_ID = 22;
inline int FilmingPrinterList_Printer::resolution_id_size() const {
  return resolution_id_.size();
}
inline void FilmingPrinterList_Printer::clear_resolution_id() {
  resolution_id_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::resolution_id(int index) const {
  return resolution_id_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_resolution_id(int index) {
  return resolution_id_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_resolution_id(int index, const ::std::string& value) {
  resolution_id_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_resolution_id(int index, const char* value) {
  resolution_id_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_resolution_id(int index, const char* value, size_t size) {
  resolution_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_resolution_id() {
  return resolution_id_.Add();
}
inline void FilmingPrinterList_Printer::add_resolution_id(const ::std::string& value) {
  resolution_id_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_resolution_id(const char* value) {
  resolution_id_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_resolution_id(const char* value, size_t size) {
  resolution_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::resolution_id() const {
  return resolution_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_resolution_id() {
  return &resolution_id_;
}

// repeated string smoothing_type = 23;
inline int FilmingPrinterList_Printer::smoothing_type_size() const {
  return smoothing_type_.size();
}
inline void FilmingPrinterList_Printer::clear_smoothing_type() {
  smoothing_type_.Clear();
}
inline const ::std::string& FilmingPrinterList_Printer::smoothing_type(int index) const {
  return smoothing_type_.Get(index);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_smoothing_type(int index) {
  return smoothing_type_.Mutable(index);
}
inline void FilmingPrinterList_Printer::set_smoothing_type(int index, const ::std::string& value) {
  smoothing_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_smoothing_type(int index, const char* value) {
  smoothing_type_.Mutable(index)->assign(value);
}
inline void FilmingPrinterList_Printer::set_smoothing_type(int index, const char* value, size_t size) {
  smoothing_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::add_smoothing_type() {
  return smoothing_type_.Add();
}
inline void FilmingPrinterList_Printer::add_smoothing_type(const ::std::string& value) {
  smoothing_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_smoothing_type(const char* value) {
  smoothing_type_.Add()->assign(value);
}
inline void FilmingPrinterList_Printer::add_smoothing_type(const char* value, size_t size) {
  smoothing_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilmingPrinterList_Printer::smoothing_type() const {
  return smoothing_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilmingPrinterList_Printer::mutable_smoothing_type() {
  return &smoothing_type_;
}

// optional bool is_support_12_bit = 24;
inline bool FilmingPrinterList_Printer::has_is_support_12_bit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_support_12_bit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_support_12_bit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FilmingPrinterList_Printer::clear_is_support_12_bit() {
  is_support_12_bit_ = false;
  clear_has_is_support_12_bit();
}
inline bool FilmingPrinterList_Printer::is_support_12_bit() const {
  return is_support_12_bit_;
}
inline void FilmingPrinterList_Printer::set_is_support_12_bit(bool value) {
  set_has_is_support_12_bit();
  is_support_12_bit_ = value;
}

// optional bool is_support_decimate_crop = 25;
inline bool FilmingPrinterList_Printer::has_is_support_decimate_crop() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_support_decimate_crop() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_support_decimate_crop() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FilmingPrinterList_Printer::clear_is_support_decimate_crop() {
  is_support_decimate_crop_ = false;
  clear_has_is_support_decimate_crop();
}
inline bool FilmingPrinterList_Printer::is_support_decimate_crop() const {
  return is_support_decimate_crop_;
}
inline void FilmingPrinterList_Printer::set_is_support_decimate_crop(bool value) {
  set_has_is_support_decimate_crop();
  is_support_decimate_crop_ = value;
}

// optional bool is_support_image_size = 26;
inline bool FilmingPrinterList_Printer::has_is_support_image_size() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_support_image_size() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_support_image_size() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FilmingPrinterList_Printer::clear_is_support_image_size() {
  is_support_image_size_ = false;
  clear_has_is_support_image_size();
}
inline bool FilmingPrinterList_Printer::is_support_image_size() const {
  return is_support_image_size_;
}
inline void FilmingPrinterList_Printer::set_is_support_image_size(bool value) {
  set_has_is_support_image_size();
  is_support_image_size_ = value;
}

// optional bool is_support_presentation_LUT = 27;
inline bool FilmingPrinterList_Printer::has_is_support_presentation_lut() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_support_presentation_lut() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_support_presentation_lut() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FilmingPrinterList_Printer::clear_is_support_presentation_lut() {
  is_support_presentation_lut_ = false;
  clear_has_is_support_presentation_lut();
}
inline bool FilmingPrinterList_Printer::is_support_presentation_lut() const {
  return is_support_presentation_lut_;
}
inline void FilmingPrinterList_Printer::set_is_support_presentation_lut(bool value) {
  set_has_is_support_presentation_lut();
  is_support_presentation_lut_ = value;
}

// optional bool is_support_trim = 28;
inline bool FilmingPrinterList_Printer::has_is_support_trim() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_is_support_trim() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FilmingPrinterList_Printer::clear_has_is_support_trim() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FilmingPrinterList_Printer::clear_is_support_trim() {
  is_support_trim_ = false;
  clear_has_is_support_trim();
}
inline bool FilmingPrinterList_Printer::is_support_trim() const {
  return is_support_trim_;
}
inline void FilmingPrinterList_Printer::set_is_support_trim(bool value) {
  set_has_is_support_trim();
  is_support_trim_ = value;
}

// optional string RootDir = 29;
inline bool FilmingPrinterList_Printer::has_rootdir() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FilmingPrinterList_Printer::set_has_rootdir() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FilmingPrinterList_Printer::clear_has_rootdir() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FilmingPrinterList_Printer::clear_rootdir() {
  if (rootdir_ != &::google::protobuf::internal::kEmptyString) {
    rootdir_->clear();
  }
  clear_has_rootdir();
}
inline const ::std::string& FilmingPrinterList_Printer::rootdir() const {
  return *rootdir_;
}
inline void FilmingPrinterList_Printer::set_rootdir(const ::std::string& value) {
  set_has_rootdir();
  if (rootdir_ == &::google::protobuf::internal::kEmptyString) {
    rootdir_ = new ::std::string;
  }
  rootdir_->assign(value);
}
inline void FilmingPrinterList_Printer::set_rootdir(const char* value) {
  set_has_rootdir();
  if (rootdir_ == &::google::protobuf::internal::kEmptyString) {
    rootdir_ = new ::std::string;
  }
  rootdir_->assign(value);
}
inline void FilmingPrinterList_Printer::set_rootdir(const char* value, size_t size) {
  set_has_rootdir();
  if (rootdir_ == &::google::protobuf::internal::kEmptyString) {
    rootdir_ = new ::std::string;
  }
  rootdir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmingPrinterList_Printer::mutable_rootdir() {
  set_has_rootdir();
  if (rootdir_ == &::google::protobuf::internal::kEmptyString) {
    rootdir_ = new ::std::string;
  }
  return rootdir_;
}
inline ::std::string* FilmingPrinterList_Printer::release_rootdir() {
  clear_has_rootdir();
  if (rootdir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rootdir_;
    rootdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FilmingPrinterList

// optional .Mcsf.FilmingJobStatus status = 1;
inline bool FilmingPrinterList::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilmingPrinterList::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilmingPrinterList::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilmingPrinterList::clear_status() {
  if (status_ != NULL) status_->::Mcsf::FilmingJobStatus::Clear();
  clear_has_status();
}
inline const ::Mcsf::FilmingJobStatus& FilmingPrinterList::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Mcsf::FilmingJobStatus* FilmingPrinterList::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::Mcsf::FilmingJobStatus;
  return status_;
}
inline ::Mcsf::FilmingJobStatus* FilmingPrinterList::release_status() {
  clear_has_status();
  ::Mcsf::FilmingJobStatus* temp = status_;
  status_ = NULL;
  return temp;
}

// repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
inline int FilmingPrinterList::printer_size() const {
  return printer_.size();
}
inline void FilmingPrinterList::clear_printer() {
  printer_.Clear();
}
inline const ::Mcsf::FilmingPrinterList_Printer& FilmingPrinterList::printer(int index) const {
  return printer_.Get(index);
}
inline ::Mcsf::FilmingPrinterList_Printer* FilmingPrinterList::mutable_printer(int index) {
  return printer_.Mutable(index);
}
inline ::Mcsf::FilmingPrinterList_Printer* FilmingPrinterList::add_printer() {
  return printer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmingPrinterList_Printer >&
FilmingPrinterList::printer() const {
  return printer_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmingPrinterList_Printer >*
FilmingPrinterList::mutable_printer() {
  return &printer_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PrinterConfig_2eproto__INCLUDED
