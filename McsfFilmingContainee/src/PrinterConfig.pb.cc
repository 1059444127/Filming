// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrinterConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

namespace {

const ::google::protobuf::Descriptor* FilmingPrinterList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilmingPrinterList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilmingPrinterList_Printer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilmingPrinterList_Printer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrinterConfig_2eproto() {
  protobuf_AddDesc_PrinterConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrinterConfig.proto");
  GOOGLE_CHECK(file != NULL);
  FilmingPrinterList_descriptor_ = file->message_type(0);
  static const int FilmingPrinterList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList, printer_),
  };
  FilmingPrinterList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilmingPrinterList_descriptor_,
      FilmingPrinterList::default_instance_,
      FilmingPrinterList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilmingPrinterList));
  FilmingPrinterList_Printer_descriptor_ = FilmingPrinterList_descriptor_->nested_type(0);
  static const int FilmingPrinterList_Printer_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, printer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, printer_ae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, printer_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, printer_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, printer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, border_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_disable_new_vrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, emptyimagedensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, film_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, film_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_implicit_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, magnification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, max_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, max_pdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, medium_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, min_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_omit_sop_class_uid_from_create_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_presentation_lut_match_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_presentation_lut_in_film_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, resolution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, smoothing_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_support_12_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_support_decimate_crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_support_image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_support_presentation_lut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, is_support_trim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, rootdir_),
  };
  FilmingPrinterList_Printer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilmingPrinterList_Printer_descriptor_,
      FilmingPrinterList_Printer::default_instance_,
      FilmingPrinterList_Printer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmingPrinterList_Printer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilmingPrinterList_Printer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrinterConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilmingPrinterList_descriptor_, &FilmingPrinterList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilmingPrinterList_Printer_descriptor_, &FilmingPrinterList_Printer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrinterConfig_2eproto() {
  delete FilmingPrinterList::default_instance_;
  delete FilmingPrinterList_reflection_;
  delete FilmingPrinterList_Printer::default_instance_;
  delete FilmingPrinterList_Printer_reflection_;
}

void protobuf_AddDesc_PrinterConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mcsf::protobuf_AddDesc_FilmingJob_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PrinterConfig.proto\022\004Mcsf\032\020FilmingJob."
    "proto\"\361\006\n\022FilmingPrinterList\022&\n\006status\030\001"
    " \001(\0132\026.Mcsf.FilmingJobStatus\0221\n\007printer\030"
    "\002 \003(\0132 .Mcsf.FilmingPrinterList.Printer\032"
    "\377\005\n\007Printer\022\022\n\nprinter_ID\030\001 \001(\t\022\022\n\nprint"
    "er_AE\030\002 \001(\t\022\022\n\nprinter_IP\030\003 \001(\t\022\024\n\014print"
    "er_port\030\004 \001(\005\022\023\n\013description\030\005 \001(\t\022\024\n\014pr"
    "inter_type\030\006 \001(\t\022\026\n\016border_density\030\007 \003(\t"
    "\022\032\n\022is_disable_new_VRs\030\010 \001(\010\022\016\n\006layout\030\t"
    " \003(\t\022\031\n\021EmptyImageDensity\030\n \003(\t\022\030\n\020film_"
    "destination\030\013 \003(\t\022\021\n\tfilm_size\030\014 \003(\t\022\030\n\020"
    "is_implicit_only\030\r \001(\010\022\032\n\022magnification_"
    "type\030\016 \003(\t\022\023\n\013max_density\030\017 \001(\005\022\017\n\007max_P"
    "DU\030\020 \001(\003\022\023\n\013medium_type\030\021 \003(\t\022\023\n\013min_den"
    "sity\030\022 \001(\005\0222\n*is_omit_SOP_class_UID_from"
    "_create_response\030\023 \001(\010\022*\n\"is_presentatio"
    "n_LUT_match_required\030\024 \001(\010\022+\n#is_present"
    "ation_LUT_in_film_session\030\025 \001(\010\022\025\n\rresol"
    "ution_ID\030\026 \003(\t\022\026\n\016smoothing_type\030\027 \003(\t\022\031"
    "\n\021is_support_12_bit\030\030 \001(\010\022 \n\030is_support_"
    "decimate_crop\030\031 \001(\010\022\035\n\025is_support_image_"
    "size\030\032 \001(\010\022#\n\033is_support_presentation_LU"
    "T\030\033 \001(\010\022\027\n\017is_support_trim\030\034 \001(\010\022\017\n\007Root"
    "Dir\030\035 \001(\t", 929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrinterConfig.proto", &protobuf_RegisterTypes);
  FilmingPrinterList::default_instance_ = new FilmingPrinterList();
  FilmingPrinterList_Printer::default_instance_ = new FilmingPrinterList_Printer();
  FilmingPrinterList::default_instance_->InitAsDefaultInstance();
  FilmingPrinterList_Printer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrinterConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrinterConfig_2eproto {
  StaticDescriptorInitializer_PrinterConfig_2eproto() {
    protobuf_AddDesc_PrinterConfig_2eproto();
  }
} static_descriptor_initializer_PrinterConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FilmingPrinterList_Printer::kPrinterIDFieldNumber;
const int FilmingPrinterList_Printer::kPrinterAEFieldNumber;
const int FilmingPrinterList_Printer::kPrinterIPFieldNumber;
const int FilmingPrinterList_Printer::kPrinterPortFieldNumber;
const int FilmingPrinterList_Printer::kDescriptionFieldNumber;
const int FilmingPrinterList_Printer::kPrinterTypeFieldNumber;
const int FilmingPrinterList_Printer::kBorderDensityFieldNumber;
const int FilmingPrinterList_Printer::kIsDisableNewVRsFieldNumber;
const int FilmingPrinterList_Printer::kLayoutFieldNumber;
const int FilmingPrinterList_Printer::kEmptyImageDensityFieldNumber;
const int FilmingPrinterList_Printer::kFilmDestinationFieldNumber;
const int FilmingPrinterList_Printer::kFilmSizeFieldNumber;
const int FilmingPrinterList_Printer::kIsImplicitOnlyFieldNumber;
const int FilmingPrinterList_Printer::kMagnificationTypeFieldNumber;
const int FilmingPrinterList_Printer::kMaxDensityFieldNumber;
const int FilmingPrinterList_Printer::kMaxPDUFieldNumber;
const int FilmingPrinterList_Printer::kMediumTypeFieldNumber;
const int FilmingPrinterList_Printer::kMinDensityFieldNumber;
const int FilmingPrinterList_Printer::kIsOmitSOPClassUIDFromCreateResponseFieldNumber;
const int FilmingPrinterList_Printer::kIsPresentationLUTMatchRequiredFieldNumber;
const int FilmingPrinterList_Printer::kIsPresentationLUTInFilmSessionFieldNumber;
const int FilmingPrinterList_Printer::kResolutionIDFieldNumber;
const int FilmingPrinterList_Printer::kSmoothingTypeFieldNumber;
const int FilmingPrinterList_Printer::kIsSupport12BitFieldNumber;
const int FilmingPrinterList_Printer::kIsSupportDecimateCropFieldNumber;
const int FilmingPrinterList_Printer::kIsSupportImageSizeFieldNumber;
const int FilmingPrinterList_Printer::kIsSupportPresentationLUTFieldNumber;
const int FilmingPrinterList_Printer::kIsSupportTrimFieldNumber;
const int FilmingPrinterList_Printer::kRootDirFieldNumber;
#endif  // !_MSC_VER

FilmingPrinterList_Printer::FilmingPrinterList_Printer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilmingPrinterList_Printer::InitAsDefaultInstance() {
}

FilmingPrinterList_Printer::FilmingPrinterList_Printer(const FilmingPrinterList_Printer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilmingPrinterList_Printer::SharedCtor() {
  _cached_size_ = 0;
  printer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_ae_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_port_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_disable_new_vrs_ = false;
  is_implicit_only_ = false;
  max_density_ = 0;
  max_pdu_ = GOOGLE_LONGLONG(0);
  min_density_ = 0;
  is_omit_sop_class_uid_from_create_response_ = false;
  is_presentation_lut_match_required_ = false;
  is_presentation_lut_in_film_session_ = false;
  is_support_12_bit_ = false;
  is_support_decimate_crop_ = false;
  is_support_image_size_ = false;
  is_support_presentation_lut_ = false;
  is_support_trim_ = false;
  rootdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilmingPrinterList_Printer::~FilmingPrinterList_Printer() {
  SharedDtor();
}

void FilmingPrinterList_Printer::SharedDtor() {
  if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_id_;
  }
  if (printer_ae_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_ae_;
  }
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_ip_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (printer_type_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_type_;
  }
  if (rootdir_ != &::google::protobuf::internal::kEmptyString) {
    delete rootdir_;
  }
  if (this != default_instance_) {
  }
}

void FilmingPrinterList_Printer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilmingPrinterList_Printer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmingPrinterList_Printer_descriptor_;
}

const FilmingPrinterList_Printer& FilmingPrinterList_Printer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrinterConfig_2eproto();  return *default_instance_;
}

FilmingPrinterList_Printer* FilmingPrinterList_Printer::default_instance_ = NULL;

FilmingPrinterList_Printer* FilmingPrinterList_Printer::New() const {
  return new FilmingPrinterList_Printer;
}

void FilmingPrinterList_Printer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_printer_id()) {
      if (printer_id_ != &::google::protobuf::internal::kEmptyString) {
        printer_id_->clear();
      }
    }
    if (has_printer_ae()) {
      if (printer_ae_ != &::google::protobuf::internal::kEmptyString) {
        printer_ae_->clear();
      }
    }
    if (has_printer_ip()) {
      if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
        printer_ip_->clear();
      }
    }
    printer_port_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_printer_type()) {
      if (printer_type_ != &::google::protobuf::internal::kEmptyString) {
        printer_type_->clear();
      }
    }
    is_disable_new_vrs_ = false;
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    is_implicit_only_ = false;
    max_density_ = 0;
    max_pdu_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    min_density_ = 0;
    is_omit_sop_class_uid_from_create_response_ = false;
    is_presentation_lut_match_required_ = false;
    is_presentation_lut_in_film_session_ = false;
    is_support_12_bit_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    is_support_decimate_crop_ = false;
    is_support_image_size_ = false;
    is_support_presentation_lut_ = false;
    is_support_trim_ = false;
    if (has_rootdir()) {
      if (rootdir_ != &::google::protobuf::internal::kEmptyString) {
        rootdir_->clear();
      }
    }
  }
  border_density_.Clear();
  layout_.Clear();
  emptyimagedensity_.Clear();
  film_destination_.Clear();
  film_size_.Clear();
  magnification_type_.Clear();
  medium_type_.Clear();
  resolution_id_.Clear();
  smoothing_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilmingPrinterList_Printer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string printer_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_id().data(), this->printer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_printer_AE;
        break;
      }
      
      // optional string printer_AE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_AE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_ae()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_ae().data(), this->printer_ae().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_printer_IP;
        break;
      }
      
      // optional string printer_IP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_ip().data(), this->printer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_printer_port;
        break;
      }
      
      // optional int32 printer_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printer_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printer_port_)));
          set_has_printer_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }
      
      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_printer_type;
        break;
      }
      
      // optional string printer_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_type().data(), this->printer_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_border_density;
        break;
      }
      
      // repeated string border_density = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_border_density:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_border_density()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->border_density(0).data(), this->border_density(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_border_density;
        if (input->ExpectTag(64)) goto parse_is_disable_new_VRs;
        break;
      }
      
      // optional bool is_disable_new_VRs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_disable_new_VRs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disable_new_vrs_)));
          set_has_is_disable_new_vrs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_layout;
        break;
      }
      
      // repeated string layout = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layout(0).data(), this->layout(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_layout;
        if (input->ExpectTag(82)) goto parse_EmptyImageDensity;
        break;
      }
      
      // repeated string EmptyImageDensity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EmptyImageDensity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emptyimagedensity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emptyimagedensity(0).data(), this->emptyimagedensity(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_EmptyImageDensity;
        if (input->ExpectTag(90)) goto parse_film_destination;
        break;
      }
      
      // repeated string film_destination = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_film_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_film_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->film_destination(0).data(), this->film_destination(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_film_destination;
        if (input->ExpectTag(98)) goto parse_film_size;
        break;
      }
      
      // repeated string film_size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_film_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_film_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->film_size(0).data(), this->film_size(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_film_size;
        if (input->ExpectTag(104)) goto parse_is_implicit_only;
        break;
      }
      
      // optional bool is_implicit_only = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_implicit_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_implicit_only_)));
          set_has_is_implicit_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_magnification_type;
        break;
      }
      
      // repeated string magnification_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magnification_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_magnification_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->magnification_type(0).data(), this->magnification_type(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_magnification_type;
        if (input->ExpectTag(120)) goto parse_max_density;
        break;
      }
      
      // optional int32 max_density = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_density_)));
          set_has_max_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_max_PDU;
        break;
      }
      
      // optional int64 max_PDU = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_PDU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_pdu_)));
          set_has_max_pdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_medium_type;
        break;
      }
      
      // repeated string medium_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medium_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_medium_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->medium_type(0).data(), this->medium_type(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_medium_type;
        if (input->ExpectTag(144)) goto parse_min_density;
        break;
      }
      
      // optional int32 min_density = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_density_)));
          set_has_min_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_is_omit_SOP_class_UID_from_create_response;
        break;
      }
      
      // optional bool is_omit_SOP_class_UID_from_create_response = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_omit_SOP_class_UID_from_create_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_omit_sop_class_uid_from_create_response_)));
          set_has_is_omit_sop_class_uid_from_create_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_is_presentation_LUT_match_required;
        break;
      }
      
      // optional bool is_presentation_LUT_match_required = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_presentation_LUT_match_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_presentation_lut_match_required_)));
          set_has_is_presentation_lut_match_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_is_presentation_LUT_in_film_session;
        break;
      }
      
      // optional bool is_presentation_LUT_in_film_session = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_presentation_LUT_in_film_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_presentation_lut_in_film_session_)));
          set_has_is_presentation_lut_in_film_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_resolution_ID;
        break;
      }
      
      // repeated string resolution_ID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resolution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resolution_id(0).data(), this->resolution_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_resolution_ID;
        if (input->ExpectTag(186)) goto parse_smoothing_type;
        break;
      }
      
      // repeated string smoothing_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smoothing_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_smoothing_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->smoothing_type(0).data(), this->smoothing_type(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_smoothing_type;
        if (input->ExpectTag(192)) goto parse_is_support_12_bit;
        break;
      }
      
      // optional bool is_support_12_bit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_support_12_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_support_12_bit_)));
          set_has_is_support_12_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_is_support_decimate_crop;
        break;
      }
      
      // optional bool is_support_decimate_crop = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_support_decimate_crop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_support_decimate_crop_)));
          set_has_is_support_decimate_crop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_is_support_image_size;
        break;
      }
      
      // optional bool is_support_image_size = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_support_image_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_support_image_size_)));
          set_has_is_support_image_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_is_support_presentation_LUT;
        break;
      }
      
      // optional bool is_support_presentation_LUT = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_support_presentation_LUT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_support_presentation_lut_)));
          set_has_is_support_presentation_lut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_is_support_trim;
        break;
      }
      
      // optional bool is_support_trim = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_support_trim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_support_trim_)));
          set_has_is_support_trim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_RootDir;
        break;
      }
      
      // optional string RootDir = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RootDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rootdir().data(), this->rootdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilmingPrinterList_Printer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string printer_ID = 1;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->printer_id(), output);
  }
  
  // optional string printer_AE = 2;
  if (has_printer_ae()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ae().data(), this->printer_ae().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->printer_ae(), output);
  }
  
  // optional string printer_IP = 3;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->printer_ip(), output);
  }
  
  // optional int32 printer_port = 4;
  if (has_printer_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->printer_port(), output);
  }
  
  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }
  
  // optional string printer_type = 6;
  if (has_printer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_type().data(), this->printer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->printer_type(), output);
  }
  
  // repeated string border_density = 7;
  for (int i = 0; i < this->border_density_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->border_density(i).data(), this->border_density(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->border_density(i), output);
  }
  
  // optional bool is_disable_new_VRs = 8;
  if (has_is_disable_new_vrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_disable_new_vrs(), output);
  }
  
  // repeated string layout = 9;
  for (int i = 0; i < this->layout_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->layout(i).data(), this->layout(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->layout(i), output);
  }
  
  // repeated string EmptyImageDensity = 10;
  for (int i = 0; i < this->emptyimagedensity_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emptyimagedensity(i).data(), this->emptyimagedensity(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->emptyimagedensity(i), output);
  }
  
  // repeated string film_destination = 11;
  for (int i = 0; i < this->film_destination_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->film_destination(i).data(), this->film_destination(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->film_destination(i), output);
  }
  
  // repeated string film_size = 12;
  for (int i = 0; i < this->film_size_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->film_size(i).data(), this->film_size(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->film_size(i), output);
  }
  
  // optional bool is_implicit_only = 13;
  if (has_is_implicit_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_implicit_only(), output);
  }
  
  // repeated string magnification_type = 14;
  for (int i = 0; i < this->magnification_type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->magnification_type(i).data(), this->magnification_type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->magnification_type(i), output);
  }
  
  // optional int32 max_density = 15;
  if (has_max_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_density(), output);
  }
  
  // optional int64 max_PDU = 16;
  if (has_max_pdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->max_pdu(), output);
  }
  
  // repeated string medium_type = 17;
  for (int i = 0; i < this->medium_type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->medium_type(i).data(), this->medium_type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->medium_type(i), output);
  }
  
  // optional int32 min_density = 18;
  if (has_min_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->min_density(), output);
  }
  
  // optional bool is_omit_SOP_class_UID_from_create_response = 19;
  if (has_is_omit_sop_class_uid_from_create_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_omit_sop_class_uid_from_create_response(), output);
  }
  
  // optional bool is_presentation_LUT_match_required = 20;
  if (has_is_presentation_lut_match_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_presentation_lut_match_required(), output);
  }
  
  // optional bool is_presentation_LUT_in_film_session = 21;
  if (has_is_presentation_lut_in_film_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_presentation_lut_in_film_session(), output);
  }
  
  // repeated string resolution_ID = 22;
  for (int i = 0; i < this->resolution_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->resolution_id(i).data(), this->resolution_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->resolution_id(i), output);
  }
  
  // repeated string smoothing_type = 23;
  for (int i = 0; i < this->smoothing_type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->smoothing_type(i).data(), this->smoothing_type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->smoothing_type(i), output);
  }
  
  // optional bool is_support_12_bit = 24;
  if (has_is_support_12_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_support_12_bit(), output);
  }
  
  // optional bool is_support_decimate_crop = 25;
  if (has_is_support_decimate_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_support_decimate_crop(), output);
  }
  
  // optional bool is_support_image_size = 26;
  if (has_is_support_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_support_image_size(), output);
  }
  
  // optional bool is_support_presentation_LUT = 27;
  if (has_is_support_presentation_lut()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_support_presentation_lut(), output);
  }
  
  // optional bool is_support_trim = 28;
  if (has_is_support_trim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_support_trim(), output);
  }
  
  // optional string RootDir = 29;
  if (has_rootdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootdir().data(), this->rootdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->rootdir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilmingPrinterList_Printer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string printer_ID = 1;
  if (has_printer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_id().data(), this->printer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->printer_id(), target);
  }
  
  // optional string printer_AE = 2;
  if (has_printer_ae()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ae().data(), this->printer_ae().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->printer_ae(), target);
  }
  
  // optional string printer_IP = 3;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->printer_ip(), target);
  }
  
  // optional int32 printer_port = 4;
  if (has_printer_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->printer_port(), target);
  }
  
  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }
  
  // optional string printer_type = 6;
  if (has_printer_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_type().data(), this->printer_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->printer_type(), target);
  }
  
  // repeated string border_density = 7;
  for (int i = 0; i < this->border_density_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->border_density(i).data(), this->border_density(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->border_density(i), target);
  }
  
  // optional bool is_disable_new_VRs = 8;
  if (has_is_disable_new_vrs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_disable_new_vrs(), target);
  }
  
  // repeated string layout = 9;
  for (int i = 0; i < this->layout_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout(i).data(), this->layout(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->layout(i), target);
  }
  
  // repeated string EmptyImageDensity = 10;
  for (int i = 0; i < this->emptyimagedensity_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emptyimagedensity(i).data(), this->emptyimagedensity(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->emptyimagedensity(i), target);
  }
  
  // repeated string film_destination = 11;
  for (int i = 0; i < this->film_destination_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->film_destination(i).data(), this->film_destination(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->film_destination(i), target);
  }
  
  // repeated string film_size = 12;
  for (int i = 0; i < this->film_size_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->film_size(i).data(), this->film_size(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->film_size(i), target);
  }
  
  // optional bool is_implicit_only = 13;
  if (has_is_implicit_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_implicit_only(), target);
  }
  
  // repeated string magnification_type = 14;
  for (int i = 0; i < this->magnification_type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->magnification_type(i).data(), this->magnification_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->magnification_type(i), target);
  }
  
  // optional int32 max_density = 15;
  if (has_max_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_density(), target);
  }
  
  // optional int64 max_PDU = 16;
  if (has_max_pdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->max_pdu(), target);
  }
  
  // repeated string medium_type = 17;
  for (int i = 0; i < this->medium_type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->medium_type(i).data(), this->medium_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->medium_type(i), target);
  }
  
  // optional int32 min_density = 18;
  if (has_min_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->min_density(), target);
  }
  
  // optional bool is_omit_SOP_class_UID_from_create_response = 19;
  if (has_is_omit_sop_class_uid_from_create_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_omit_sop_class_uid_from_create_response(), target);
  }
  
  // optional bool is_presentation_LUT_match_required = 20;
  if (has_is_presentation_lut_match_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_presentation_lut_match_required(), target);
  }
  
  // optional bool is_presentation_LUT_in_film_session = 21;
  if (has_is_presentation_lut_in_film_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_presentation_lut_in_film_session(), target);
  }
  
  // repeated string resolution_ID = 22;
  for (int i = 0; i < this->resolution_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution_id(i).data(), this->resolution_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->resolution_id(i), target);
  }
  
  // repeated string smoothing_type = 23;
  for (int i = 0; i < this->smoothing_type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smoothing_type(i).data(), this->smoothing_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->smoothing_type(i), target);
  }
  
  // optional bool is_support_12_bit = 24;
  if (has_is_support_12_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_support_12_bit(), target);
  }
  
  // optional bool is_support_decimate_crop = 25;
  if (has_is_support_decimate_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_support_decimate_crop(), target);
  }
  
  // optional bool is_support_image_size = 26;
  if (has_is_support_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_support_image_size(), target);
  }
  
  // optional bool is_support_presentation_LUT = 27;
  if (has_is_support_presentation_lut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_support_presentation_lut(), target);
  }
  
  // optional bool is_support_trim = 28;
  if (has_is_support_trim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_support_trim(), target);
  }
  
  // optional string RootDir = 29;
  if (has_rootdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootdir().data(), this->rootdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->rootdir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilmingPrinterList_Printer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string printer_ID = 1;
    if (has_printer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_id());
    }
    
    // optional string printer_AE = 2;
    if (has_printer_ae()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_ae());
    }
    
    // optional string printer_IP = 3;
    if (has_printer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_ip());
    }
    
    // optional int32 printer_port = 4;
    if (has_printer_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printer_port());
    }
    
    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional string printer_type = 6;
    if (has_printer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_type());
    }
    
    // optional bool is_disable_new_VRs = 8;
    if (has_is_disable_new_vrs()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional bool is_implicit_only = 13;
    if (has_is_implicit_only()) {
      total_size += 1 + 1;
    }
    
    // optional int32 max_density = 15;
    if (has_max_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_density());
    }
    
    // optional int64 max_PDU = 16;
    if (has_max_pdu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_pdu());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 min_density = 18;
    if (has_min_density()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_density());
    }
    
    // optional bool is_omit_SOP_class_UID_from_create_response = 19;
    if (has_is_omit_sop_class_uid_from_create_response()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_presentation_LUT_match_required = 20;
    if (has_is_presentation_lut_match_required()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_presentation_LUT_in_film_session = 21;
    if (has_is_presentation_lut_in_film_session()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_support_12_bit = 24;
    if (has_is_support_12_bit()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool is_support_decimate_crop = 25;
    if (has_is_support_decimate_crop()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_support_image_size = 26;
    if (has_is_support_image_size()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_support_presentation_LUT = 27;
    if (has_is_support_presentation_lut()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_support_trim = 28;
    if (has_is_support_trim()) {
      total_size += 2 + 1;
    }
    
    // optional string RootDir = 29;
    if (has_rootdir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rootdir());
    }
    
  }
  // repeated string border_density = 7;
  total_size += 1 * this->border_density_size();
  for (int i = 0; i < this->border_density_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->border_density(i));
  }
  
  // repeated string layout = 9;
  total_size += 1 * this->layout_size();
  for (int i = 0; i < this->layout_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layout(i));
  }
  
  // repeated string EmptyImageDensity = 10;
  total_size += 1 * this->emptyimagedensity_size();
  for (int i = 0; i < this->emptyimagedensity_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emptyimagedensity(i));
  }
  
  // repeated string film_destination = 11;
  total_size += 1 * this->film_destination_size();
  for (int i = 0; i < this->film_destination_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->film_destination(i));
  }
  
  // repeated string film_size = 12;
  total_size += 1 * this->film_size_size();
  for (int i = 0; i < this->film_size_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->film_size(i));
  }
  
  // repeated string magnification_type = 14;
  total_size += 1 * this->magnification_type_size();
  for (int i = 0; i < this->magnification_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->magnification_type(i));
  }
  
  // repeated string medium_type = 17;
  total_size += 2 * this->medium_type_size();
  for (int i = 0; i < this->medium_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->medium_type(i));
  }
  
  // repeated string resolution_ID = 22;
  total_size += 2 * this->resolution_id_size();
  for (int i = 0; i < this->resolution_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resolution_id(i));
  }
  
  // repeated string smoothing_type = 23;
  total_size += 2 * this->smoothing_type_size();
  for (int i = 0; i < this->smoothing_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->smoothing_type(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilmingPrinterList_Printer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilmingPrinterList_Printer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilmingPrinterList_Printer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilmingPrinterList_Printer::MergeFrom(const FilmingPrinterList_Printer& from) {
  GOOGLE_CHECK_NE(&from, this);
  border_density_.MergeFrom(from.border_density_);
  layout_.MergeFrom(from.layout_);
  emptyimagedensity_.MergeFrom(from.emptyimagedensity_);
  film_destination_.MergeFrom(from.film_destination_);
  film_size_.MergeFrom(from.film_size_);
  magnification_type_.MergeFrom(from.magnification_type_);
  medium_type_.MergeFrom(from.medium_type_);
  resolution_id_.MergeFrom(from.resolution_id_);
  smoothing_type_.MergeFrom(from.smoothing_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printer_id()) {
      set_printer_id(from.printer_id());
    }
    if (from.has_printer_ae()) {
      set_printer_ae(from.printer_ae());
    }
    if (from.has_printer_ip()) {
      set_printer_ip(from.printer_ip());
    }
    if (from.has_printer_port()) {
      set_printer_port(from.printer_port());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_printer_type()) {
      set_printer_type(from.printer_type());
    }
    if (from.has_is_disable_new_vrs()) {
      set_is_disable_new_vrs(from.is_disable_new_vrs());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_is_implicit_only()) {
      set_is_implicit_only(from.is_implicit_only());
    }
    if (from.has_max_density()) {
      set_max_density(from.max_density());
    }
    if (from.has_max_pdu()) {
      set_max_pdu(from.max_pdu());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_min_density()) {
      set_min_density(from.min_density());
    }
    if (from.has_is_omit_sop_class_uid_from_create_response()) {
      set_is_omit_sop_class_uid_from_create_response(from.is_omit_sop_class_uid_from_create_response());
    }
    if (from.has_is_presentation_lut_match_required()) {
      set_is_presentation_lut_match_required(from.is_presentation_lut_match_required());
    }
    if (from.has_is_presentation_lut_in_film_session()) {
      set_is_presentation_lut_in_film_session(from.is_presentation_lut_in_film_session());
    }
    if (from.has_is_support_12_bit()) {
      set_is_support_12_bit(from.is_support_12_bit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_is_support_decimate_crop()) {
      set_is_support_decimate_crop(from.is_support_decimate_crop());
    }
    if (from.has_is_support_image_size()) {
      set_is_support_image_size(from.is_support_image_size());
    }
    if (from.has_is_support_presentation_lut()) {
      set_is_support_presentation_lut(from.is_support_presentation_lut());
    }
    if (from.has_is_support_trim()) {
      set_is_support_trim(from.is_support_trim());
    }
    if (from.has_rootdir()) {
      set_rootdir(from.rootdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilmingPrinterList_Printer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilmingPrinterList_Printer::CopyFrom(const FilmingPrinterList_Printer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilmingPrinterList_Printer::IsInitialized() const {
  
  return true;
}

void FilmingPrinterList_Printer::Swap(FilmingPrinterList_Printer* other) {
  if (other != this) {
    std::swap(printer_id_, other->printer_id_);
    std::swap(printer_ae_, other->printer_ae_);
    std::swap(printer_ip_, other->printer_ip_);
    std::swap(printer_port_, other->printer_port_);
    std::swap(description_, other->description_);
    std::swap(printer_type_, other->printer_type_);
    border_density_.Swap(&other->border_density_);
    std::swap(is_disable_new_vrs_, other->is_disable_new_vrs_);
    layout_.Swap(&other->layout_);
    emptyimagedensity_.Swap(&other->emptyimagedensity_);
    film_destination_.Swap(&other->film_destination_);
    film_size_.Swap(&other->film_size_);
    std::swap(is_implicit_only_, other->is_implicit_only_);
    magnification_type_.Swap(&other->magnification_type_);
    std::swap(max_density_, other->max_density_);
    std::swap(max_pdu_, other->max_pdu_);
    medium_type_.Swap(&other->medium_type_);
    std::swap(min_density_, other->min_density_);
    std::swap(is_omit_sop_class_uid_from_create_response_, other->is_omit_sop_class_uid_from_create_response_);
    std::swap(is_presentation_lut_match_required_, other->is_presentation_lut_match_required_);
    std::swap(is_presentation_lut_in_film_session_, other->is_presentation_lut_in_film_session_);
    resolution_id_.Swap(&other->resolution_id_);
    smoothing_type_.Swap(&other->smoothing_type_);
    std::swap(is_support_12_bit_, other->is_support_12_bit_);
    std::swap(is_support_decimate_crop_, other->is_support_decimate_crop_);
    std::swap(is_support_image_size_, other->is_support_image_size_);
    std::swap(is_support_presentation_lut_, other->is_support_presentation_lut_);
    std::swap(is_support_trim_, other->is_support_trim_);
    std::swap(rootdir_, other->rootdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilmingPrinterList_Printer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilmingPrinterList_Printer_descriptor_;
  metadata.reflection = FilmingPrinterList_Printer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FilmingPrinterList::kStatusFieldNumber;
const int FilmingPrinterList::kPrinterFieldNumber;
#endif  // !_MSC_VER

FilmingPrinterList::FilmingPrinterList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilmingPrinterList::InitAsDefaultInstance() {
  status_ = const_cast< ::Mcsf::FilmingJobStatus*>(&::Mcsf::FilmingJobStatus::default_instance());
}

FilmingPrinterList::FilmingPrinterList(const FilmingPrinterList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilmingPrinterList::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilmingPrinterList::~FilmingPrinterList() {
  SharedDtor();
}

void FilmingPrinterList::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void FilmingPrinterList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilmingPrinterList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmingPrinterList_descriptor_;
}

const FilmingPrinterList& FilmingPrinterList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrinterConfig_2eproto();  return *default_instance_;
}

FilmingPrinterList* FilmingPrinterList::default_instance_ = NULL;

FilmingPrinterList* FilmingPrinterList::New() const {
  return new FilmingPrinterList;
}

void FilmingPrinterList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::Mcsf::FilmingJobStatus::Clear();
    }
  }
  printer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilmingPrinterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mcsf.FilmingJobStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_printer;
        break;
      }
      
      // repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_printer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_printer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilmingPrinterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Mcsf.FilmingJobStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
  for (int i = 0; i < this->printer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->printer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilmingPrinterList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Mcsf.FilmingJobStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
  for (int i = 0; i < this->printer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->printer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilmingPrinterList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Mcsf.FilmingJobStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .Mcsf.FilmingPrinterList.Printer printer = 2;
  total_size += 1 * this->printer_size();
  for (int i = 0; i < this->printer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->printer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilmingPrinterList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilmingPrinterList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilmingPrinterList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilmingPrinterList::MergeFrom(const FilmingPrinterList& from) {
  GOOGLE_CHECK_NE(&from, this);
  printer_.MergeFrom(from.printer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::Mcsf::FilmingJobStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilmingPrinterList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilmingPrinterList::CopyFrom(const FilmingPrinterList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilmingPrinterList::IsInitialized() const {
  
  return true;
}

void FilmingPrinterList::Swap(FilmingPrinterList* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    printer_.Swap(&other->printer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilmingPrinterList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilmingPrinterList_descriptor_;
  metadata.reflection = FilmingPrinterList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

// @@protoc_insertion_point(global_scope)
