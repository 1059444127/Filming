// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "mcsf_dicomdatabase_filmingjobtable-odb.hxx"

#include <cstring> // std::memcpy

#include <odb/cache-traits.hxx>
#include <odb/schema-catalog-impl.hxx>
#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // FilmingJobTable
  //

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::JobID (
    "_.`JobID`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::JobStatus (
    "_.`JobStatus`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::JobPriority (
    "_.`JobPriority`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::FilmAmount (
    "_.`FilmAmount`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::RefPatientID (
    "_.`RefPatientID`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::RefPatientName (
    "_.`RefPatientName`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::RefPatientAge (
    "_.`RefPatientAge`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::RefPatientSex (
    "_.`RefPatientSex`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::OperatorName (
    "_.`OperatorName`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::RefAccessionNo (
    "_.`RefAccessionNo`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::OurAE (
    "_.`OurAE`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::PrinterAE (
    "_.`PrinterAE`");

  const mysql::query_column<
    mysql::value_traits< ::std::string, mysql::id_string >::query_type,
    mysql::id_string >
  access::object_traits< ::FilmingJobTable >::query_columns::PrinterIP (
    "_.`PrinterIP`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::PrinterPort (
    "_.`PrinterPort`");

  const mysql::query_column<
    mysql::value_traits< long long int, mysql::id_longlong >::query_type,
    mysql::id_longlong >
  access::object_traits< ::FilmingJobTable >::query_columns::MaxPDU (
    "_.`MaxPDU`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::ImplicitOnly (
    "_.`ImplicitOnly`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::SupportsPLUT (
    "_.`SupportsPLUT`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::SupportsAnnotation (
    "_.`SupportsAnnotation`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::Supports12bit (
    "_.`Supports12bit`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::PLUTinFilmSession (
    "_.`PLUTinFilmSession`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::RerquiresMatchingLUT (
    "_.`RerquiresMatchingLUT`");

  const mysql::query_column<
    mysql::value_traits< int, mysql::id_long >::query_type,
    mysql::id_long >
  access::object_traits< ::FilmingJobTable >::query_columns::PreferSCPLUTRendering (
    "_.`PreferSCPLUTRendering`");

  access::object_traits< ::FilmingJobTable >::id_type
  access::object_traits< ::FilmingJobTable >::
  id (const image_type& i)
  {
    id_type id;
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      id, i.m_JobID_value, i.m_JobID_null);

    return id;
  }

  bool access::object_traits< ::FilmingJobTable >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_JobID
    //
    t[0UL] = 0;

    // m_JobStatus
    //
    t[1UL] = 0;

    // m_JobPriority
    //
    t[2UL] = 0;

    // m_FilmAmount
    //
    t[3UL] = 0;

    // m_RefPatientID
    //
    if (t[4UL])
    {
      i.m_RefPatientID_value.capacity (i.m_RefPatientID_size);
      grew = true;
    }

    // m_RefPatientName
    //
    if (t[5UL])
    {
      i.m_RefPatientName_value.capacity (i.m_RefPatientName_size);
      grew = true;
    }

    // m_RefPatientAge
    //
    if (t[6UL])
    {
      i.m_RefPatientAge_value.capacity (i.m_RefPatientAge_size);
      grew = true;
    }

    // m_RefPatientSex
    //
    if (t[7UL])
    {
      i.m_RefPatientSex_value.capacity (i.m_RefPatientSex_size);
      grew = true;
    }

    // m_OperatorName
    //
    if (t[8UL])
    {
      i.m_OperatorName_value.capacity (i.m_OperatorName_size);
      grew = true;
    }

    // m_RefAccessionNo
    //
    if (t[9UL])
    {
      i.m_RefAccessionNo_value.capacity (i.m_RefAccessionNo_size);
      grew = true;
    }

    // m_OurAE
    //
    if (t[10UL])
    {
      i.m_OurAE_value.capacity (i.m_OurAE_size);
      grew = true;
    }

    // m_PrinterAE
    //
    if (t[11UL])
    {
      i.m_PrinterAE_value.capacity (i.m_PrinterAE_size);
      grew = true;
    }

    // m_PrinterIP
    //
    if (t[12UL])
    {
      i.m_PrinterIP_value.capacity (i.m_PrinterIP_size);
      grew = true;
    }

    // m_PrinterPort
    //
    t[13UL] = 0;

    // m_MaxPDU
    //
    t[14UL] = 0;

    // m_ImplicitOnly
    //
    t[15UL] = 0;

    // m_SupportsPLUT
    //
    t[16UL] = 0;

    // m_SupportsAnnotation
    //
    t[17UL] = 0;

    // m_Supports12bit
    //
    t[18UL] = 0;

    // m_PLUTinFilmSession
    //
    t[19UL] = 0;

    // m_RerquiresMatchingLUT
    //
    t[20UL] = 0;

    // m_PreferSCPLUTRendering
    //
    t[21UL] = 0;

    return grew;
  }

  void access::object_traits< ::FilmingJobTable >::
  bind (MYSQL_BIND* b, image_type& i, bool out)
  {
    ODB_POTENTIALLY_UNUSED (out);

    std::size_t n (0);

    // m_JobID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_JobID_value;
    b[n].is_null = &i.m_JobID_null;
    n++;

    // m_JobStatus
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_JobStatus_value;
    b[n].is_null = &i.m_JobStatus_null;
    n++;

    // m_JobPriority
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_JobPriority_value;
    b[n].is_null = &i.m_JobPriority_null;
    n++;

    // m_FilmAmount
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_FilmAmount_value;
    b[n].is_null = &i.m_FilmAmount_null;
    n++;

    // m_RefPatientID
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_RefPatientID_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_RefPatientID_value.capacity ());
    b[n].length = &i.m_RefPatientID_size;
    b[n].is_null = &i.m_RefPatientID_null;
    n++;

    // m_RefPatientName
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_RefPatientName_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_RefPatientName_value.capacity ());
    b[n].length = &i.m_RefPatientName_size;
    b[n].is_null = &i.m_RefPatientName_null;
    n++;

    // m_RefPatientAge
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_RefPatientAge_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_RefPatientAge_value.capacity ());
    b[n].length = &i.m_RefPatientAge_size;
    b[n].is_null = &i.m_RefPatientAge_null;
    n++;

    // m_RefPatientSex
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_RefPatientSex_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_RefPatientSex_value.capacity ());
    b[n].length = &i.m_RefPatientSex_size;
    b[n].is_null = &i.m_RefPatientSex_null;
    n++;

    // m_OperatorName
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_OperatorName_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_OperatorName_value.capacity ());
    b[n].length = &i.m_OperatorName_size;
    b[n].is_null = &i.m_OperatorName_null;
    n++;

    // m_RefAccessionNo
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_RefAccessionNo_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_RefAccessionNo_value.capacity ());
    b[n].length = &i.m_RefAccessionNo_size;
    b[n].is_null = &i.m_RefAccessionNo_null;
    n++;

    // m_OurAE
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_OurAE_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_OurAE_value.capacity ());
    b[n].length = &i.m_OurAE_size;
    b[n].is_null = &i.m_OurAE_null;
    n++;

    // m_PrinterAE
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_PrinterAE_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_PrinterAE_value.capacity ());
    b[n].length = &i.m_PrinterAE_size;
    b[n].is_null = &i.m_PrinterAE_null;
    n++;

    // m_PrinterIP
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.m_PrinterIP_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.m_PrinterIP_value.capacity ());
    b[n].length = &i.m_PrinterIP_size;
    b[n].is_null = &i.m_PrinterIP_null;
    n++;

    // m_PrinterPort
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_PrinterPort_value;
    b[n].is_null = &i.m_PrinterPort_null;
    n++;

    // m_MaxPDU
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_MaxPDU_value;
    b[n].is_null = &i.m_MaxPDU_null;
    n++;

    // m_ImplicitOnly
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_ImplicitOnly_value;
    b[n].is_null = &i.m_ImplicitOnly_null;
    n++;

    // m_SupportsPLUT
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_SupportsPLUT_value;
    b[n].is_null = &i.m_SupportsPLUT_null;
    n++;

    // m_SupportsAnnotation
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_SupportsAnnotation_value;
    b[n].is_null = &i.m_SupportsAnnotation_null;
    n++;

    // m_Supports12bit
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_Supports12bit_value;
    b[n].is_null = &i.m_Supports12bit_null;
    n++;

    // m_PLUTinFilmSession
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_PLUTinFilmSession_value;
    b[n].is_null = &i.m_PLUTinFilmSession_null;
    n++;

    // m_RerquiresMatchingLUT
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_RerquiresMatchingLUT_value;
    b[n].is_null = &i.m_RerquiresMatchingLUT_null;
    n++;

    // m_PreferSCPLUTRendering
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.m_PreferSCPLUTRendering_value;
    b[n].is_null = &i.m_PreferSCPLUTRendering_null;
    n++;
  }

  void access::object_traits< ::FilmingJobTable >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::FilmingJobTable >::
  init (image_type& i, const object_type& o)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);

    bool grew (false);

    // m_JobID
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_JobID_value, is_null, o.m_JobID);
      i.m_JobID_null = is_null;
    }

    // m_JobStatus
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_JobStatus_value, is_null, o.m_JobStatus);
      i.m_JobStatus_null = is_null;
    }

    // m_JobPriority
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_JobPriority_value, is_null, o.m_JobPriority);
      i.m_JobPriority_null = is_null;
    }

    // m_FilmAmount
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_FilmAmount_value, is_null, o.m_FilmAmount);
      i.m_FilmAmount_null = is_null;
    }

    // m_RefPatientID
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_RefPatientID_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_RefPatientID_value,
        size,
        is_null,
        o.m_RefPatientID);
      i.m_RefPatientID_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_RefPatientID_value.capacity ());
      i.m_RefPatientID_null = is_null;
    }

    // m_RefPatientName
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_RefPatientName_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_RefPatientName_value,
        size,
        is_null,
        o.m_RefPatientName);
      i.m_RefPatientName_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_RefPatientName_value.capacity ());
      i.m_RefPatientName_null = is_null;
    }

    // m_RefPatientAge
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_RefPatientAge_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_RefPatientAge_value,
        size,
        is_null,
        o.m_RefPatientAge);
      i.m_RefPatientAge_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_RefPatientAge_value.capacity ());
      i.m_RefPatientAge_null = is_null;
    }

    // m_RefPatientSex
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_RefPatientSex_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_RefPatientSex_value,
        size,
        is_null,
        o.m_RefPatientSex);
      i.m_RefPatientSex_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_RefPatientSex_value.capacity ());
      i.m_RefPatientSex_null = is_null;
    }

    // m_OperatorName
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_OperatorName_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_OperatorName_value,
        size,
        is_null,
        o.m_OperatorName);
      i.m_OperatorName_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_OperatorName_value.capacity ());
      i.m_OperatorName_null = is_null;
    }

    // m_RefAccessionNo
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_RefAccessionNo_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_RefAccessionNo_value,
        size,
        is_null,
        o.m_RefAccessionNo);
      i.m_RefAccessionNo_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_RefAccessionNo_value.capacity ());
      i.m_RefAccessionNo_null = is_null;
    }

    // m_OurAE
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_OurAE_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_OurAE_value,
        size,
        is_null,
        o.m_OurAE);
      i.m_OurAE_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_OurAE_value.capacity ());
      i.m_OurAE_null = is_null;
    }

    // m_PrinterAE
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_PrinterAE_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_PrinterAE_value,
        size,
        is_null,
        o.m_PrinterAE);
      i.m_PrinterAE_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_PrinterAE_value.capacity ());
      i.m_PrinterAE_null = is_null;
    }

    // m_PrinterIP
    //
    {
      bool is_null;
      std::size_t size (0);
      std::size_t cap (i.m_PrinterIP_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.m_PrinterIP_value,
        size,
        is_null,
        o.m_PrinterIP);
      i.m_PrinterIP_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.m_PrinterIP_value.capacity ());
      i.m_PrinterIP_null = is_null;
    }

    // m_PrinterPort
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_PrinterPort_value, is_null, o.m_PrinterPort);
      i.m_PrinterPort_null = is_null;
    }

    // m_MaxPDU
    //
    {
      bool is_null;
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.m_MaxPDU_value, is_null, o.m_MaxPDU);
      i.m_MaxPDU_null = is_null;
    }

    // m_ImplicitOnly
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_ImplicitOnly_value, is_null, o.m_ImplicitOnly);
      i.m_ImplicitOnly_null = is_null;
    }

    // m_SupportsPLUT
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_SupportsPLUT_value, is_null, o.m_SupportsPLUT);
      i.m_SupportsPLUT_null = is_null;
    }

    // m_SupportsAnnotation
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_SupportsAnnotation_value, is_null, o.m_SupportsAnnotation);
      i.m_SupportsAnnotation_null = is_null;
    }

    // m_Supports12bit
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_Supports12bit_value, is_null, o.m_Supports12bit);
      i.m_Supports12bit_null = is_null;
    }

    // m_PLUTinFilmSession
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_PLUTinFilmSession_value, is_null, o.m_PLUTinFilmSession);
      i.m_PLUTinFilmSession_null = is_null;
    }

    // m_RerquiresMatchingLUT
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_RerquiresMatchingLUT_value, is_null, o.m_RerquiresMatchingLUT);
      i.m_RerquiresMatchingLUT_null = is_null;
    }

    // m_PreferSCPLUTRendering
    //
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.m_PreferSCPLUTRendering_value, is_null, o.m_PreferSCPLUTRendering);
      i.m_PreferSCPLUTRendering_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::FilmingJobTable >::
  init (object_type& o, const image_type& i, database& db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_JobID
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_JobID, i.m_JobID_value, i.m_JobID_null);

    // m_JobStatus
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_JobStatus, i.m_JobStatus_value, i.m_JobStatus_null);

    // m_JobPriority
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_JobPriority, i.m_JobPriority_value, i.m_JobPriority_null);

    // m_FilmAmount
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_FilmAmount, i.m_FilmAmount_value, i.m_FilmAmount_null);

    // m_RefPatientID
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_RefPatientID,
      i.m_RefPatientID_value,
      i.m_RefPatientID_size,
      i.m_RefPatientID_null);

    // m_RefPatientName
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_RefPatientName,
      i.m_RefPatientName_value,
      i.m_RefPatientName_size,
      i.m_RefPatientName_null);

    // m_RefPatientAge
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_RefPatientAge,
      i.m_RefPatientAge_value,
      i.m_RefPatientAge_size,
      i.m_RefPatientAge_null);

    // m_RefPatientSex
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_RefPatientSex,
      i.m_RefPatientSex_value,
      i.m_RefPatientSex_size,
      i.m_RefPatientSex_null);

    // m_OperatorName
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_OperatorName,
      i.m_OperatorName_value,
      i.m_OperatorName_size,
      i.m_OperatorName_null);

    // m_RefAccessionNo
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_RefAccessionNo,
      i.m_RefAccessionNo_value,
      i.m_RefAccessionNo_size,
      i.m_RefAccessionNo_null);

    // m_OurAE
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_OurAE,
      i.m_OurAE_value,
      i.m_OurAE_size,
      i.m_OurAE_null);

    // m_PrinterAE
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_PrinterAE,
      i.m_PrinterAE_value,
      i.m_PrinterAE_size,
      i.m_PrinterAE_null);

    // m_PrinterIP
    //
    mysql::value_traits<
        ::std::string,
        mysql::id_string >::set_value (
      o.m_PrinterIP,
      i.m_PrinterIP_value,
      i.m_PrinterIP_size,
      i.m_PrinterIP_null);

    // m_PrinterPort
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_PrinterPort, i.m_PrinterPort_value, i.m_PrinterPort_null);

    // m_MaxPDU
    //
    mysql::value_traits<
        long long int,
        mysql::id_longlong >::set_value (
      o.m_MaxPDU, i.m_MaxPDU_value, i.m_MaxPDU_null);

    // m_ImplicitOnly
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_ImplicitOnly, i.m_ImplicitOnly_value, i.m_ImplicitOnly_null);

    // m_SupportsPLUT
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_SupportsPLUT, i.m_SupportsPLUT_value, i.m_SupportsPLUT_null);

    // m_SupportsAnnotation
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_SupportsAnnotation, i.m_SupportsAnnotation_value, i.m_SupportsAnnotation_null);

    // m_Supports12bit
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_Supports12bit, i.m_Supports12bit_value, i.m_Supports12bit_null);

    // m_PLUTinFilmSession
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_PLUTinFilmSession, i.m_PLUTinFilmSession_value, i.m_PLUTinFilmSession_null);

    // m_RerquiresMatchingLUT
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_RerquiresMatchingLUT, i.m_RerquiresMatchingLUT_value, i.m_RerquiresMatchingLUT_null);

    // m_PreferSCPLUTRendering
    //
    mysql::value_traits<
        int,
        mysql::id_long >::set_value (
      o.m_PreferSCPLUTRendering, i.m_PreferSCPLUTRendering_value, i.m_PreferSCPLUTRendering_null);
  }

  void access::object_traits< ::FilmingJobTable >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null;
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::FilmingJobTable >::container_statement_cache_type
  {
    container_statement_cache_type (mysql::connection&)
    {
    }
  };

  const char* const access::object_traits< ::FilmingJobTable >::persist_statement =
  "INSERT INTO `FilmingJobTable` ("
  "`JobID`,"
  "`JobStatus`,"
  "`JobPriority`,"
  "`FilmAmount`,"
  "`RefPatientID`,"
  "`RefPatientName`,"
  "`RefPatientAge`,"
  "`RefPatientSex`,"
  "`OperatorName`,"
  "`RefAccessionNo`,"
  "`OurAE`,"
  "`PrinterAE`,"
  "`PrinterIP`,"
  "`PrinterPort`,"
  "`MaxPDU`,"
  "`ImplicitOnly`,"
  "`SupportsPLUT`,"
  "`SupportsAnnotation`,"
  "`Supports12bit`,"
  "`PLUTinFilmSession`,"
  "`RerquiresMatchingLUT`,"
  "`PreferSCPLUTRendering`"
  ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char* const access::object_traits< ::FilmingJobTable >::find_statement =
  "SELECT "
  "_.`JobID`,"
  "_.`JobStatus`,"
  "_.`JobPriority`,"
  "_.`FilmAmount`,"
  "_.`RefPatientID`,"
  "_.`RefPatientName`,"
  "_.`RefPatientAge`,"
  "_.`RefPatientSex`,"
  "_.`OperatorName`,"
  "_.`RefAccessionNo`,"
  "_.`OurAE`,"
  "_.`PrinterAE`,"
  "_.`PrinterIP`,"
  "_.`PrinterPort`,"
  "_.`MaxPDU`,"
  "_.`ImplicitOnly`,"
  "_.`SupportsPLUT`,"
  "_.`SupportsAnnotation`,"
  "_.`Supports12bit`,"
  "_.`PLUTinFilmSession`,"
  "_.`RerquiresMatchingLUT`,"
  "_.`PreferSCPLUTRendering`"
  " FROM `FilmingJobTable` AS _"
  " WHERE _.`JobID` = ?";

  const char* const access::object_traits< ::FilmingJobTable >::update_statement =
  "UPDATE `FilmingJobTable` SET "
  "`JobID` = ?,"
  "`JobStatus` = ?,"
  "`JobPriority` = ?,"
  "`FilmAmount` = ?,"
  "`RefPatientID` = ?,"
  "`RefPatientName` = ?,"
  "`RefPatientAge` = ?,"
  "`RefPatientSex` = ?,"
  "`OperatorName` = ?,"
  "`RefAccessionNo` = ?,"
  "`OurAE` = ?,"
  "`PrinterAE` = ?,"
  "`PrinterIP` = ?,"
  "`PrinterPort` = ?,"
  "`MaxPDU` = ?,"
  "`ImplicitOnly` = ?,"
  "`SupportsPLUT` = ?,"
  "`SupportsAnnotation` = ?,"
  "`Supports12bit` = ?,"
  "`PLUTinFilmSession` = ?,"
  "`RerquiresMatchingLUT` = ?,"
  "`PreferSCPLUTRendering` = ?"
  " WHERE `JobID` = ?";

  const char* const access::object_traits< ::FilmingJobTable >::erase_statement =
  "DELETE FROM `FilmingJobTable`"
  " WHERE `JobID` = ?";

  const char* const access::object_traits< ::FilmingJobTable >::query_clause =
  "SELECT "
  "_.`JobID`,"
  "_.`JobStatus`,"
  "_.`JobPriority`,"
  "_.`FilmAmount`,"
  "_.`RefPatientID`,"
  "_.`RefPatientName`,"
  "_.`RefPatientAge`,"
  "_.`RefPatientSex`,"
  "_.`OperatorName`,"
  "_.`RefAccessionNo`,"
  "_.`OurAE`,"
  "_.`PrinterAE`,"
  "_.`PrinterIP`,"
  "_.`PrinterPort`,"
  "_.`MaxPDU`,"
  "_.`ImplicitOnly`,"
  "_.`SupportsPLUT`,"
  "_.`SupportsAnnotation`,"
  "_.`Supports12bit`,"
  "_.`PLUTinFilmSession`,"
  "_.`RerquiresMatchingLUT`,"
  "_.`PreferSCPLUTRendering`"
  " FROM `FilmingJobTable` AS _"
  " ";

  void access::object_traits< ::FilmingJobTable >::
  persist (database&, const object_type& obj)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());
    image_type& im (sts.image ());
    binding& imb (sts.in_image_binding ());

    if (init (im, obj))
      im.version++;

    if (im.version != sts.in_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, false);
      sts.in_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();
  }

  void access::object_traits< ::FilmingJobTable >::
  update (database&, const object_type& obj)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.m_JobID);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.in_image_binding ());

    if (init (im, obj))
      im.version++;

    if (im.version != sts.in_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, false);
      sts.in_image_version (im.version);
      imb.version++;
    }

    sts.update_statement ().execute ();
  }

  void access::object_traits< ::FilmingJobTable >::
  erase (database&, const id_type& id)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();
  }

  access::object_traits< ::FilmingJobTable >::pointer_type
  access::object_traits< ::FilmingJobTable >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());
    object_statements< object_type >::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory< object_type, pointer_type  >::create ());
    pointer_traits< pointer_type >::guard pg (p);
    pointer_cache_traits< pointer_type >::insert_guard ig (
      pointer_cache_traits< pointer_type >::insert (db, id, p));
    object_type& obj (pointer_traits< pointer_type >::get_ref (p));

    if (l.locked ())
    {
      init (obj, sts.image (), db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::FilmingJobTable >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());
    object_statements< object_type >::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, id))
        return false;
    }

    reference_cache_traits< object_type >::insert_guard ig (
      reference_cache_traits< object_type >::insert (db, id, obj));

    if (l.locked ())
    {
      init (obj, sts.image (), db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    return true;
  }

  bool access::object_traits< ::FilmingJobTable >::
  find_ (mysql::object_statements< object_type >& sts, const id_type& id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.out_image_binding ());

    if (im.version != sts.out_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, true);
      sts.out_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.out_image_truncated ()))
        im.version++;

      if (im.version != sts.out_image_version ())
      {
        bind (imb.bind, im, true);
        sts.out_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    st.free_result ();
    return r != select_statement::no_data;
  }

  template<>
  result< access::object_traits< ::FilmingJobTable >::object_type >
  access::object_traits< ::FilmingJobTable >::
  query< access::object_traits< ::FilmingJobTable >::object_type > (
    database& db,
    const query_type& q)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());

    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());
    details::shared_ptr<select_statement> st;

    query_ (db, q, sts, st);

    details::shared_ptr<odb::result_impl<object_type> > r (
      new (details::shared) mysql::result_impl<object_type> (q, st, sts));
    return result<object_type> (r);
  }

  template<>
  result< const access::object_traits< ::FilmingJobTable >::object_type >
  access::object_traits< ::FilmingJobTable >::
  query< const access::object_traits< ::FilmingJobTable >::object_type > (
    database& db,
    const query_type& q)
  {
    using namespace mysql;

    connection& conn (mysql::transaction::current ().connection ());

    object_statements< object_type >& sts (
      conn.statement_cache ().find<object_type> ());
    details::shared_ptr<select_statement> st;

    query_ (db, q, sts, st);

    details::shared_ptr<odb::result_impl<const object_type> > r (
      new (details::shared) mysql::result_impl<const object_type> (q, st, sts));
    return result<const object_type> (r);
  }

  void access::object_traits< ::FilmingJobTable >::
  query_ (database&,
          const query_type& q,
          mysql::object_statements< object_type >& sts,
          details::shared_ptr<mysql::select_statement>& st)
  {
    using namespace mysql;

    image_type& im (sts.image ());
    binding& imb (sts.out_image_binding ());

    if (im.version != sts.out_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, true);
      sts.out_image_version (im.version);
      imb.version++;
    }

    st.reset (new (details::shared) select_statement (
                sts.connection (),
                query_clause + q.clause (),
                q.parameters_binding (),
                imb));
    st->execute ();
  }

  void access::object_traits< ::FilmingJobTable >::
  create_schema (database& db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    db.execute ("DROP TABLE IF EXISTS `FilmingJobTable`");

    db.execute ("CREATE TABLE `FilmingJobTable` ("
                "  `JobID` int not null PRIMARY KEY,"
                "  `JobStatus` int,"
                "  `JobPriority` int,"
                "  `FilmAmount` int,"
                "  `RefPatientID` varchar(64),"
                "  `RefPatientName` varchar(64),"
                "  `RefPatientAge` varchar(16),"
                "  `RefPatientSex` varchar(16),"
                "  `OperatorName` varchar(64),"
                "  `RefAccessionNo` varchar(16),"
                "  `OurAE` varchar(16),"
                "  `PrinterAE` varchar(16),"
                "  `PrinterIP` varchar(16),"
                "  `PrinterPort` int,"
                "  `MaxPDU` bigint,"
                "  `ImplicitOnly` int,"
                "  `SupportsPLUT` int,"
                "  `SupportsAnnotation` int,"
                "  `Supports12bit` int,"
                "  `PLUTinFilmSession` int,"
                "  `RerquiresMatchingLUT` int,"
                "  `PreferSCPLUTRendering` int)"
                " ENGINE=InnoDB");
  }

  static const schema_catalog_entry
  schema_catalog_entry_FilmingJobTable_ (
    "",
    &access::object_traits< ::FilmingJobTable >::create_schema);
}

// Begin epilogue.
//
//
// End epilogue.

#include <odb/post.hxx>
