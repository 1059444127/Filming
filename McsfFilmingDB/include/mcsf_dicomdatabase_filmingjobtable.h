//////////////////////////////////////////////////////////////////////////
/// \defgroup McsfDatabase of Common Software Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2011
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  qiangqiang.zhou@united-imaging.com
///
///  \file       mcsf_dicomdatabase_filmingjobtable.h
///  \brief   This file was generated by CodeGenerater.exe 
///              which translates database script into classes supported by ODB
///
///  \version 1.0
///  \date    11/14/2011
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef MCSF_DICOMDATABASE_FILMINGJOBTABLE_H
#define MCSF_DICOMDATABASE_FILMINGJOBTABLE_H
#include <string>
#include <odb/core.hxx>

#include <boost/date_time/gregorian/gregorian_types.hpp>// for posix_time::ptime --DATETIME
#include <boost/date_time/posix_time/posix_time_types.hpp>

#pragma db object
class FilmingJobTable
{
public:

FilmingJobTable (
const int& JobID,
const int& JobStatus,
const int& JobPriority,
const int& FilmAmount,
const std::string& RefPatientID,
const std::string& RefPatientName,
const std::string& RefPatientAge,
const std::string& RefPatientSex,
const std::string& OperatorName,
const std::string& RefAccessionNo,
const std::string& OurAE,
const std::string& PrinterAE,
const std::string& PrinterIP,
const int& PrinterPort,
const long long& MaxPDU,
const int& ImplicitOnly,
const int& SupportsPLUT,
const int& SupportsAnnotation,
const int& Supports12bit,
const int& PLUTinFilmSession,
const int& RerquiresMatchingLUT,
const int& PreferSCPLUTRendering
):
m_JobID(JobID),
m_JobStatus(JobStatus),
m_JobPriority(JobPriority),
m_FilmAmount(FilmAmount),
m_RefPatientID(RefPatientID),
m_RefPatientName(RefPatientName),
m_RefPatientAge(RefPatientAge),
m_RefPatientSex(RefPatientSex),
m_OperatorName(OperatorName),
m_RefAccessionNo(RefAccessionNo),
m_OurAE(OurAE),
m_PrinterAE(PrinterAE),
m_PrinterIP(PrinterIP),
m_PrinterPort(PrinterPort),
m_MaxPDU(MaxPDU),
m_ImplicitOnly(ImplicitOnly),
m_SupportsPLUT(SupportsPLUT),
m_SupportsAnnotation(SupportsAnnotation),
m_Supports12bit(Supports12bit),
m_PLUTinFilmSession(PLUTinFilmSession),
m_RerquiresMatchingLUT(RerquiresMatchingLUT),
m_PreferSCPLUTRendering(PreferSCPLUTRendering)
{
}

const int& GetJobID () const 
{
	return m_JobID;
}
void SetJobID (const int& JobID)
{
	m_JobID = JobID;
}

const int& GetJobStatus () const 
{
	return m_JobStatus;
}
void SetJobStatus (const int& JobStatus)
{
	m_JobStatus = JobStatus;
}

const int& GetJobPriority () const 
{
	return m_JobPriority;
}
void SetJobPriority (const int& JobPriority)
{
	m_JobPriority = JobPriority;
}

const int& GetFilmAmount () const 
{
	return m_FilmAmount;
}
void SetFilmAmount (const int& FilmAmount)
{
	m_FilmAmount = FilmAmount;
}

const std::string& GetRefPatientID () const 
{
	return m_RefPatientID;
}
void SetRefPatientID (const std::string& RefPatientID)
{
	m_RefPatientID = RefPatientID;
}

const std::string& GetRefPatientName () const 
{
	return m_RefPatientName;
}
void SetRefPatientName (const std::string& RefPatientName)
{
	m_RefPatientName = RefPatientName;
}

const std::string& GetRefPatientAge () const 
{
	return m_RefPatientAge;
}
void SetRefPatientAge (const std::string& RefPatientAge)
{
	m_RefPatientAge = RefPatientAge;
}

const std::string& GetRefPatientSex () const 
{
	return m_RefPatientSex;
}
void SetRefPatientSex (const std::string& RefPatientSex)
{
	m_RefPatientSex = RefPatientSex;
}

const std::string& GetOperatorName () const 
{
	return m_OperatorName;
}
void SetOperatorName (const std::string& OperatorName)
{
	m_OperatorName = OperatorName;
}

const std::string& GetRefAccessionNo () const 
{
	return m_RefAccessionNo;
}
void SetRefAccessionNo (const std::string& RefAccessionNo)
{
	m_RefAccessionNo = RefAccessionNo;
}

const std::string& GetOurAE () const 
{
	return m_OurAE;
}
void SetOurAE (const std::string& OurAE)
{
	m_OurAE = OurAE;
}

const std::string& GetPrinterAE () const 
{
	return m_PrinterAE;
}
void SetPrinterAE (const std::string& PrinterAE)
{
	m_PrinterAE = PrinterAE;
}

const std::string& GetPrinterIP () const 
{
	return m_PrinterIP;
}
void SetPrinterIP (const std::string& PrinterIP)
{
	m_PrinterIP = PrinterIP;
}

const int& GetPrinterPort () const 
{
	return m_PrinterPort;
}
void SetPrinterPort (const int& PrinterPort)
{
	m_PrinterPort = PrinterPort;
}

const long long& GetMaxPDU () const 
{
	return m_MaxPDU;
}
void SetMaxPDU (const long long& MaxPDU)
{
	m_MaxPDU = MaxPDU;
}

const int& GetImplicitOnly () const 
{
	return m_ImplicitOnly;
}
void SetImplicitOnly (const int& ImplicitOnly)
{
	m_ImplicitOnly = ImplicitOnly;
}

const int& GetSupportsPLUT () const 
{
	return m_SupportsPLUT;
}
void SetSupportsPLUT (const int& SupportsPLUT)
{
	m_SupportsPLUT = SupportsPLUT;
}

const int& GetSupportsAnnotation () const 
{
	return m_SupportsAnnotation;
}
void SetSupportsAnnotation (const int& SupportsAnnotation)
{
	m_SupportsAnnotation = SupportsAnnotation;
}

const int& GetSupports12bit () const 
{
	return m_Supports12bit;
}
void SetSupports12bit (const int& Supports12bit)
{
	m_Supports12bit = Supports12bit;
}

const int& GetPLUTinFilmSession () const 
{
	return m_PLUTinFilmSession;
}
void SetPLUTinFilmSession (const int& PLUTinFilmSession)
{
	m_PLUTinFilmSession = PLUTinFilmSession;
}

const int& GetRerquiresMatchingLUT () const 
{
	return m_RerquiresMatchingLUT;
}
void SetRerquiresMatchingLUT (const int& RerquiresMatchingLUT)
{
	m_RerquiresMatchingLUT = RerquiresMatchingLUT;
}

const int& GetPreferSCPLUTRendering () const 
{
	return m_PreferSCPLUTRendering;
}
void SetPreferSCPLUTRendering (const int& PreferSCPLUTRendering)
{
	m_PreferSCPLUTRendering = PreferSCPLUTRendering;
}

private:
friend class odb::access;

FilmingJobTable () {}

//22 parameters


#pragma db id type("int not null")
int m_JobID;
//Job ID

#pragma db type("int")
int m_JobStatus;
//JobStatus

#pragma db type("int")
int m_JobPriority;
//JobPriority

#pragma db type("int")
int m_FilmAmount;
//the number of total film

#pragma db type("varchar(64)")
std::string m_RefPatientID;
//patient ID

#pragma db type("varchar(64)")
std::string m_RefPatientName;
//patient name

#pragma db type("varchar(16)")
std::string m_RefPatientAge;
//patient age

#pragma db type("varchar(16)")
std::string m_RefPatientSex;
//patient sex

#pragma db type("varchar(64)")
std::string m_OperatorName;
//operator doctor name

#pragma db type("varchar(16)")
std::string m_RefAccessionNo;
//accession Number

#pragma db type("varchar(16)")
std::string m_OurAE;
//our workstation ae

#pragma db type("varchar(16)")
std::string m_PrinterAE;
//printer ae

#pragma db type("varchar(16)")
std::string m_PrinterIP;
//printer ip or hostname

#pragma db type("int")
int m_PrinterPort;
//listen port

#pragma db type("bigint")
long long m_MaxPDU;
//max PDU

#pragma db type("int")
int m_ImplicitOnly;
//comment

#pragma db type("int")
int m_SupportsPLUT;
//comment

#pragma db type("int")
int m_SupportsAnnotation;
//comment

#pragma db type("int")
int m_Supports12bit;
//comment

#pragma db type("int")
int m_PLUTinFilmSession;
//comment

#pragma db type("int")
int m_RerquiresMatchingLUT;
//comment

#pragma db type("int")
int m_PreferSCPLUTRendering;
//comment
};

#endif // MCSF_DICOMDATABASE_FILMINGJOBTABLE_H
