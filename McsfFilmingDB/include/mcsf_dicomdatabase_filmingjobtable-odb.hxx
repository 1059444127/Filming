// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MCSF_DICOMDATABASE_FILMINGJOBTABLE_ODB_HXX
#define MCSF_DICOMDATABASE_FILMINGJOBTABLE_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 10400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include <odb/boost/version.hxx>
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
//
// End prologue.

#include "mcsf_dicomdatabase_filmingjobtable.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/result.hxx>

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // FilmingJobTable
  //
  template <>
  class access::object_traits< ::FilmingJobTable >
  {
    public:
    typedef ::FilmingJobTable object_type;
    typedef ::boost::shared_ptr< ::FilmingJobTable > pointer_type;
    typedef int id_type;

    struct id_image_type
    {
      int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // m_JobID
      //
      int m_JobID_value;
      my_bool m_JobID_null;

      // m_JobStatus
      //
      int m_JobStatus_value;
      my_bool m_JobStatus_null;

      // m_JobPriority
      //
      int m_JobPriority_value;
      my_bool m_JobPriority_null;

      // m_FilmAmount
      //
      int m_FilmAmount_value;
      my_bool m_FilmAmount_null;

      // m_RefPatientID
      //
      details::buffer m_RefPatientID_value;
      unsigned long m_RefPatientID_size;
      my_bool m_RefPatientID_null;

      // m_RefPatientName
      //
      details::buffer m_RefPatientName_value;
      unsigned long m_RefPatientName_size;
      my_bool m_RefPatientName_null;

      // m_RefPatientAge
      //
      details::buffer m_RefPatientAge_value;
      unsigned long m_RefPatientAge_size;
      my_bool m_RefPatientAge_null;

      // m_RefPatientSex
      //
      details::buffer m_RefPatientSex_value;
      unsigned long m_RefPatientSex_size;
      my_bool m_RefPatientSex_null;

      // m_OperatorName
      //
      details::buffer m_OperatorName_value;
      unsigned long m_OperatorName_size;
      my_bool m_OperatorName_null;

      // m_RefAccessionNo
      //
      details::buffer m_RefAccessionNo_value;
      unsigned long m_RefAccessionNo_size;
      my_bool m_RefAccessionNo_null;

      // m_OurAE
      //
      details::buffer m_OurAE_value;
      unsigned long m_OurAE_size;
      my_bool m_OurAE_null;

      // m_PrinterAE
      //
      details::buffer m_PrinterAE_value;
      unsigned long m_PrinterAE_size;
      my_bool m_PrinterAE_null;

      // m_PrinterIP
      //
      details::buffer m_PrinterIP_value;
      unsigned long m_PrinterIP_size;
      my_bool m_PrinterIP_null;

      // m_PrinterPort
      //
      int m_PrinterPort_value;
      my_bool m_PrinterPort_null;

      // m_MaxPDU
      //
      long long m_MaxPDU_value;
      my_bool m_MaxPDU_null;

      // m_ImplicitOnly
      //
      int m_ImplicitOnly_value;
      my_bool m_ImplicitOnly_null;

      // m_SupportsPLUT
      //
      int m_SupportsPLUT_value;
      my_bool m_SupportsPLUT_null;

      // m_SupportsAnnotation
      //
      int m_SupportsAnnotation_value;
      my_bool m_SupportsAnnotation_null;

      // m_Supports12bit
      //
      int m_Supports12bit_value;
      my_bool m_Supports12bit_null;

      // m_PLUTinFilmSession
      //
      int m_PLUTinFilmSession_value;
      my_bool m_PLUTinFilmSession_null;

      // m_RerquiresMatchingLUT
      //
      int m_RerquiresMatchingLUT_value;
      my_bool m_RerquiresMatchingLUT_null;

      // m_PreferSCPLUTRendering
      //
      int m_PreferSCPLUTRendering_value;
      my_bool m_PreferSCPLUTRendering_null;

      std::size_t version;
    };

    struct query_columns
    {
      // JobID
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      JobID;

      // JobStatus
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      JobStatus;

      // JobPriority
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      JobPriority;

      // FilmAmount
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      FilmAmount;

      // RefPatientID
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      RefPatientID;

      // RefPatientName
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      RefPatientName;

      // RefPatientAge
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      RefPatientAge;

      // RefPatientSex
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      RefPatientSex;

      // OperatorName
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      OperatorName;

      // RefAccessionNo
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      RefAccessionNo;

      // OurAE
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      OurAE;

      // PrinterAE
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      PrinterAE;

      // PrinterIP
      //
      static const mysql::query_column<
        mysql::value_traits< ::std::string, mysql::id_string >::query_type,
        mysql::id_string >
      PrinterIP;

      // PrinterPort
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      PrinterPort;

      // MaxPDU
      //
      static const mysql::query_column<
        mysql::value_traits< long long int, mysql::id_longlong >::query_type,
        mysql::id_longlong >
      MaxPDU;

      // ImplicitOnly
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      ImplicitOnly;

      // SupportsPLUT
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      SupportsPLUT;

      // SupportsAnnotation
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      SupportsAnnotation;

      // Supports12bit
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      Supports12bit;

      // PLUTinFilmSession
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      PLUTinFilmSession;

      // RerquiresMatchingLUT
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      RerquiresMatchingLUT;

      // PreferSCPLUTRendering
      //
      static const mysql::query_column<
        mysql::value_traits< int, mysql::id_long >::query_type,
        mysql::id_long >
      PreferSCPLUTRendering;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, my_bool*);

    static void
    bind (MYSQL_BIND*, image_type&, bool);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&, const object_type&);

    static void
    init (object_type&, const image_type&, database&);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::query query_base_type;

    struct query_type: query_base_type, query_columns
    {
      query_type ();
      query_type (const std::string&);
      query_type (const query_base_type&);
    };

    struct container_statement_cache_type;

    static const std::size_t in_column_count = 22UL;
    static const std::size_t out_column_count = 22UL;

    static const char* const persist_statement;
    static const char* const find_statement;
    static const char* const update_statement;
    static const char* const erase_statement;
    static const char* const query_clause;

    static void
    persist (database&, const object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    template<typename T>
    static result<T>
    query (database&, const query_type&);

    static void
    create_schema (database&);

    public:
    static bool
    find_ (mysql::object_statements< object_type >&, const id_type&);

    static void
    load_ (mysql::object_statements< object_type >&, object_type&);

    static void
    query_ (database&,
            const query_type&,
            mysql::object_statements< object_type >&,
            details::shared_ptr< mysql::select_statement >&);
  };
}

#include "mcsf_dicomdatabase_filmingjobtable-odb.ixx"

// Begin epilogue.
//
//
// End epilogue.

#include <odb/post.hxx>

#endif // MCSF_DICOMDATABASE_FILMINGJOBTABLE_ODB_HXX
