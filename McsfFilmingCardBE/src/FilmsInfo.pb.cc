// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FilmsInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

namespace {

const ::google::protobuf::Descriptor* FilmsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilmsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilmsInfo_ImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilmsInfo_ImageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilmsInfo_FilmInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilmsInfo_FilmInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FilmsInfo_2eproto() {
  protobuf_AddDesc_FilmsInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FilmsInfo.proto");
  GOOGLE_CHECK(file != NULL);
  FilmsInfo_descriptor_ = file->message_type(0);
  static const int FilmsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo, film_),
  };
  FilmsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilmsInfo_descriptor_,
      FilmsInfo::default_instance_,
      FilmsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilmsInfo));
  FilmsInfo_ImageInfo_descriptor_ = FilmsInfo_descriptor_->nested_type(0);
  static const int FilmsInfo_ImageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_ImageInfo, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_ImageInfo, cell_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_ImageInfo, stack_index_),
  };
  FilmsInfo_ImageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilmsInfo_ImageInfo_descriptor_,
      FilmsInfo_ImageInfo::default_instance_,
      FilmsInfo_ImageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_ImageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_ImageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilmsInfo_ImageInfo));
  FilmsInfo_FilmInfo_descriptor_ = FilmsInfo_descriptor_->nested_type(1);
  static const int FilmsInfo_FilmInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_FilmInfo, film_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_FilmInfo, image_),
  };
  FilmsInfo_FilmInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilmsInfo_FilmInfo_descriptor_,
      FilmsInfo_FilmInfo::default_instance_,
      FilmsInfo_FilmInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_FilmInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilmsInfo_FilmInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilmsInfo_FilmInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FilmsInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilmsInfo_descriptor_, &FilmsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilmsInfo_ImageInfo_descriptor_, &FilmsInfo_ImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilmsInfo_FilmInfo_descriptor_, &FilmsInfo_FilmInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FilmsInfo_2eproto() {
  delete FilmsInfo::default_instance_;
  delete FilmsInfo_reflection_;
  delete FilmsInfo_ImageInfo::default_instance_;
  delete FilmsInfo_ImageInfo_reflection_;
  delete FilmsInfo_FilmInfo::default_instance_;
  delete FilmsInfo_FilmInfo_reflection_;
}

void protobuf_AddDesc_FilmsInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017FilmsInfo.proto\022\004Mcsf\"\301\001\n\tFilmsInfo\022&\n"
    "\004film\030\001 \003(\0132\030.Mcsf.FilmsInfo.FilmInfo\032B\n"
    "\tImageInfo\022\014\n\004file\030\001 \001(\t\022\022\n\ncell_index\030\002"
    " \001(\005\022\023\n\013stack_index\030\003 \001(\005\032H\n\010FilmInfo\022\022\n"
    "\nfilm_index\030\001 \001(\005\022(\n\005image\030\002 \003(\0132\031.Mcsf."
    "FilmsInfo.ImageInfo", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FilmsInfo.proto", &protobuf_RegisterTypes);
  FilmsInfo::default_instance_ = new FilmsInfo();
  FilmsInfo_ImageInfo::default_instance_ = new FilmsInfo_ImageInfo();
  FilmsInfo_FilmInfo::default_instance_ = new FilmsInfo_FilmInfo();
  FilmsInfo::default_instance_->InitAsDefaultInstance();
  FilmsInfo_ImageInfo::default_instance_->InitAsDefaultInstance();
  FilmsInfo_FilmInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FilmsInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FilmsInfo_2eproto {
  StaticDescriptorInitializer_FilmsInfo_2eproto() {
    protobuf_AddDesc_FilmsInfo_2eproto();
  }
} static_descriptor_initializer_FilmsInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FilmsInfo_ImageInfo::kFileFieldNumber;
const int FilmsInfo_ImageInfo::kCellIndexFieldNumber;
const int FilmsInfo_ImageInfo::kStackIndexFieldNumber;
#endif  // !_MSC_VER

FilmsInfo_ImageInfo::FilmsInfo_ImageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilmsInfo_ImageInfo::InitAsDefaultInstance() {
}

FilmsInfo_ImageInfo::FilmsInfo_ImageInfo(const FilmsInfo_ImageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilmsInfo_ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_index_ = 0;
  stack_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilmsInfo_ImageInfo::~FilmsInfo_ImageInfo() {
  SharedDtor();
}

void FilmsInfo_ImageInfo::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void FilmsInfo_ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilmsInfo_ImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmsInfo_ImageInfo_descriptor_;
}

const FilmsInfo_ImageInfo& FilmsInfo_ImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FilmsInfo_2eproto();  return *default_instance_;
}

FilmsInfo_ImageInfo* FilmsInfo_ImageInfo::default_instance_ = NULL;

FilmsInfo_ImageInfo* FilmsInfo_ImageInfo::New() const {
  return new FilmsInfo_ImageInfo;
}

void FilmsInfo_ImageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    cell_index_ = 0;
    stack_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilmsInfo_ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cell_index;
        break;
      }
      
      // optional int32 cell_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_index_)));
          set_has_cell_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stack_index;
        break;
      }
      
      // optional int32 stack_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stack_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_index_)));
          set_has_stack_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilmsInfo_ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // optional int32 cell_index = 2;
  if (has_cell_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cell_index(), output);
  }
  
  // optional int32 stack_index = 3;
  if (has_stack_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stack_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilmsInfo_ImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }
  
  // optional int32 cell_index = 2;
  if (has_cell_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cell_index(), target);
  }
  
  // optional int32 stack_index = 3;
  if (has_stack_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stack_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilmsInfo_ImageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // optional int32 cell_index = 2;
    if (has_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_index());
    }
    
    // optional int32 stack_index = 3;
    if (has_stack_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stack_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilmsInfo_ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilmsInfo_ImageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilmsInfo_ImageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilmsInfo_ImageInfo::MergeFrom(const FilmsInfo_ImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_cell_index()) {
      set_cell_index(from.cell_index());
    }
    if (from.has_stack_index()) {
      set_stack_index(from.stack_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilmsInfo_ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilmsInfo_ImageInfo::CopyFrom(const FilmsInfo_ImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilmsInfo_ImageInfo::IsInitialized() const {
  
  return true;
}

void FilmsInfo_ImageInfo::Swap(FilmsInfo_ImageInfo* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(cell_index_, other->cell_index_);
    std::swap(stack_index_, other->stack_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilmsInfo_ImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilmsInfo_ImageInfo_descriptor_;
  metadata.reflection = FilmsInfo_ImageInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FilmsInfo_FilmInfo::kFilmIndexFieldNumber;
const int FilmsInfo_FilmInfo::kImageFieldNumber;
#endif  // !_MSC_VER

FilmsInfo_FilmInfo::FilmsInfo_FilmInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilmsInfo_FilmInfo::InitAsDefaultInstance() {
}

FilmsInfo_FilmInfo::FilmsInfo_FilmInfo(const FilmsInfo_FilmInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilmsInfo_FilmInfo::SharedCtor() {
  _cached_size_ = 0;
  film_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilmsInfo_FilmInfo::~FilmsInfo_FilmInfo() {
  SharedDtor();
}

void FilmsInfo_FilmInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilmsInfo_FilmInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilmsInfo_FilmInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmsInfo_FilmInfo_descriptor_;
}

const FilmsInfo_FilmInfo& FilmsInfo_FilmInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FilmsInfo_2eproto();  return *default_instance_;
}

FilmsInfo_FilmInfo* FilmsInfo_FilmInfo::default_instance_ = NULL;

FilmsInfo_FilmInfo* FilmsInfo_FilmInfo::New() const {
  return new FilmsInfo_FilmInfo;
}

void FilmsInfo_FilmInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    film_index_ = 0;
  }
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilmsInfo_FilmInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 film_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &film_index_)));
          set_has_film_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }
      
      // repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilmsInfo_FilmInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 film_index = 1;
  if (has_film_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->film_index(), output);
  }
  
  // repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilmsInfo_FilmInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 film_index = 1;
  if (has_film_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->film_index(), target);
  }
  
  // repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilmsInfo_FilmInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 film_index = 1;
    if (has_film_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->film_index());
    }
    
  }
  // repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilmsInfo_FilmInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilmsInfo_FilmInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilmsInfo_FilmInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilmsInfo_FilmInfo::MergeFrom(const FilmsInfo_FilmInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_film_index()) {
      set_film_index(from.film_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilmsInfo_FilmInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilmsInfo_FilmInfo::CopyFrom(const FilmsInfo_FilmInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilmsInfo_FilmInfo::IsInitialized() const {
  
  return true;
}

void FilmsInfo_FilmInfo::Swap(FilmsInfo_FilmInfo* other) {
  if (other != this) {
    std::swap(film_index_, other->film_index_);
    image_.Swap(&other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilmsInfo_FilmInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilmsInfo_FilmInfo_descriptor_;
  metadata.reflection = FilmsInfo_FilmInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FilmsInfo::kFilmFieldNumber;
#endif  // !_MSC_VER

FilmsInfo::FilmsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilmsInfo::InitAsDefaultInstance() {
}

FilmsInfo::FilmsInfo(const FilmsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilmsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilmsInfo::~FilmsInfo() {
  SharedDtor();
}

void FilmsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilmsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilmsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmsInfo_descriptor_;
}

const FilmsInfo& FilmsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FilmsInfo_2eproto();  return *default_instance_;
}

FilmsInfo* FilmsInfo::default_instance_ = NULL;

FilmsInfo* FilmsInfo::New() const {
  return new FilmsInfo;
}

void FilmsInfo::Clear() {
  film_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilmsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_film:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_film()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_film;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilmsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
  for (int i = 0; i < this->film_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->film(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilmsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
  for (int i = 0; i < this->film_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->film(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilmsInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
  total_size += 1 * this->film_size();
  for (int i = 0; i < this->film_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->film(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilmsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilmsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilmsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilmsInfo::MergeFrom(const FilmsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  film_.MergeFrom(from.film_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilmsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilmsInfo::CopyFrom(const FilmsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilmsInfo::IsInitialized() const {
  
  return true;
}

void FilmsInfo::Swap(FilmsInfo* other) {
  if (other != this) {
    film_.Swap(&other->film_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilmsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilmsInfo_descriptor_;
  metadata.reflection = FilmsInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

// @@protoc_insertion_point(global_scope)
