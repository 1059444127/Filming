// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FilmsInfo.proto

#ifndef PROTOBUF_FilmsInfo_2eproto__INCLUDED
#define PROTOBUF_FilmsInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Mcsf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FilmsInfo_2eproto();
void protobuf_AssignDesc_FilmsInfo_2eproto();
void protobuf_ShutdownFile_FilmsInfo_2eproto();

class FilmsInfo;
class FilmsInfo_ImageInfo;
class FilmsInfo_FilmInfo;

// ===================================================================

class FilmsInfo_ImageInfo : public ::google::protobuf::Message {
 public:
  FilmsInfo_ImageInfo();
  virtual ~FilmsInfo_ImageInfo();
  
  FilmsInfo_ImageInfo(const FilmsInfo_ImageInfo& from);
  
  inline FilmsInfo_ImageInfo& operator=(const FilmsInfo_ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilmsInfo_ImageInfo& default_instance();
  
  void Swap(FilmsInfo_ImageInfo* other);
  
  // implements Message ----------------------------------------------
  
  FilmsInfo_ImageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilmsInfo_ImageInfo& from);
  void MergeFrom(const FilmsInfo_ImageInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // optional int32 cell_index = 2;
  inline bool has_cell_index() const;
  inline void clear_cell_index();
  static const int kCellIndexFieldNumber = 2;
  inline ::google::protobuf::int32 cell_index() const;
  inline void set_cell_index(::google::protobuf::int32 value);
  
  // optional int32 stack_index = 3;
  inline bool has_stack_index() const;
  inline void clear_stack_index();
  static const int kStackIndexFieldNumber = 3;
  inline ::google::protobuf::int32 stack_index() const;
  inline void set_stack_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Mcsf.FilmsInfo.ImageInfo)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_cell_index();
  inline void clear_has_cell_index();
  inline void set_has_stack_index();
  inline void clear_has_stack_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* file_;
  ::google::protobuf::int32 cell_index_;
  ::google::protobuf::int32 stack_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_FilmsInfo_2eproto();
  friend void protobuf_AssignDesc_FilmsInfo_2eproto();
  friend void protobuf_ShutdownFile_FilmsInfo_2eproto();
  
  void InitAsDefaultInstance();
  static FilmsInfo_ImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class FilmsInfo_FilmInfo : public ::google::protobuf::Message {
 public:
  FilmsInfo_FilmInfo();
  virtual ~FilmsInfo_FilmInfo();
  
  FilmsInfo_FilmInfo(const FilmsInfo_FilmInfo& from);
  
  inline FilmsInfo_FilmInfo& operator=(const FilmsInfo_FilmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilmsInfo_FilmInfo& default_instance();
  
  void Swap(FilmsInfo_FilmInfo* other);
  
  // implements Message ----------------------------------------------
  
  FilmsInfo_FilmInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilmsInfo_FilmInfo& from);
  void MergeFrom(const FilmsInfo_FilmInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 film_index = 1;
  inline bool has_film_index() const;
  inline void clear_film_index();
  static const int kFilmIndexFieldNumber = 1;
  inline ::google::protobuf::int32 film_index() const;
  inline void set_film_index(::google::protobuf::int32 value);
  
  // repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::Mcsf::FilmsInfo_ImageInfo& image(int index) const;
  inline ::Mcsf::FilmsInfo_ImageInfo* mutable_image(int index);
  inline ::Mcsf::FilmsInfo_ImageInfo* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_ImageInfo >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_ImageInfo >*
      mutable_image();
  
  // @@protoc_insertion_point(class_scope:Mcsf.FilmsInfo.FilmInfo)
 private:
  inline void set_has_film_index();
  inline void clear_has_film_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_ImageInfo > image_;
  ::google::protobuf::int32 film_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_FilmsInfo_2eproto();
  friend void protobuf_AssignDesc_FilmsInfo_2eproto();
  friend void protobuf_ShutdownFile_FilmsInfo_2eproto();
  
  void InitAsDefaultInstance();
  static FilmsInfo_FilmInfo* default_instance_;
};
// -------------------------------------------------------------------

class FilmsInfo : public ::google::protobuf::Message {
 public:
  FilmsInfo();
  virtual ~FilmsInfo();
  
  FilmsInfo(const FilmsInfo& from);
  
  inline FilmsInfo& operator=(const FilmsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilmsInfo& default_instance();
  
  void Swap(FilmsInfo* other);
  
  // implements Message ----------------------------------------------
  
  FilmsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilmsInfo& from);
  void MergeFrom(const FilmsInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FilmsInfo_ImageInfo ImageInfo;
  typedef FilmsInfo_FilmInfo FilmInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
  inline int film_size() const;
  inline void clear_film();
  static const int kFilmFieldNumber = 1;
  inline const ::Mcsf::FilmsInfo_FilmInfo& film(int index) const;
  inline ::Mcsf::FilmsInfo_FilmInfo* mutable_film(int index);
  inline ::Mcsf::FilmsInfo_FilmInfo* add_film();
  inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_FilmInfo >&
      film() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_FilmInfo >*
      mutable_film();
  
  // @@protoc_insertion_point(class_scope:Mcsf.FilmsInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_FilmInfo > film_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_FilmsInfo_2eproto();
  friend void protobuf_AssignDesc_FilmsInfo_2eproto();
  friend void protobuf_ShutdownFile_FilmsInfo_2eproto();
  
  void InitAsDefaultInstance();
  static FilmsInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FilmsInfo_ImageInfo

// optional string file = 1;
inline bool FilmsInfo_ImageInfo::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilmsInfo_ImageInfo::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilmsInfo_ImageInfo::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilmsInfo_ImageInfo::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& FilmsInfo_ImageInfo::file() const {
  return *file_;
}
inline void FilmsInfo_ImageInfo::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void FilmsInfo_ImageInfo::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void FilmsInfo_ImageInfo::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilmsInfo_ImageInfo::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* FilmsInfo_ImageInfo::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cell_index = 2;
inline bool FilmsInfo_ImageInfo::has_cell_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilmsInfo_ImageInfo::set_has_cell_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilmsInfo_ImageInfo::clear_has_cell_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilmsInfo_ImageInfo::clear_cell_index() {
  cell_index_ = 0;
  clear_has_cell_index();
}
inline ::google::protobuf::int32 FilmsInfo_ImageInfo::cell_index() const {
  return cell_index_;
}
inline void FilmsInfo_ImageInfo::set_cell_index(::google::protobuf::int32 value) {
  set_has_cell_index();
  cell_index_ = value;
}

// optional int32 stack_index = 3;
inline bool FilmsInfo_ImageInfo::has_stack_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilmsInfo_ImageInfo::set_has_stack_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilmsInfo_ImageInfo::clear_has_stack_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilmsInfo_ImageInfo::clear_stack_index() {
  stack_index_ = 0;
  clear_has_stack_index();
}
inline ::google::protobuf::int32 FilmsInfo_ImageInfo::stack_index() const {
  return stack_index_;
}
inline void FilmsInfo_ImageInfo::set_stack_index(::google::protobuf::int32 value) {
  set_has_stack_index();
  stack_index_ = value;
}

// -------------------------------------------------------------------

// FilmsInfo_FilmInfo

// optional int32 film_index = 1;
inline bool FilmsInfo_FilmInfo::has_film_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilmsInfo_FilmInfo::set_has_film_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilmsInfo_FilmInfo::clear_has_film_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilmsInfo_FilmInfo::clear_film_index() {
  film_index_ = 0;
  clear_has_film_index();
}
inline ::google::protobuf::int32 FilmsInfo_FilmInfo::film_index() const {
  return film_index_;
}
inline void FilmsInfo_FilmInfo::set_film_index(::google::protobuf::int32 value) {
  set_has_film_index();
  film_index_ = value;
}

// repeated .Mcsf.FilmsInfo.ImageInfo image = 2;
inline int FilmsInfo_FilmInfo::image_size() const {
  return image_.size();
}
inline void FilmsInfo_FilmInfo::clear_image() {
  image_.Clear();
}
inline const ::Mcsf::FilmsInfo_ImageInfo& FilmsInfo_FilmInfo::image(int index) const {
  return image_.Get(index);
}
inline ::Mcsf::FilmsInfo_ImageInfo* FilmsInfo_FilmInfo::mutable_image(int index) {
  return image_.Mutable(index);
}
inline ::Mcsf::FilmsInfo_ImageInfo* FilmsInfo_FilmInfo::add_image() {
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_ImageInfo >&
FilmsInfo_FilmInfo::image() const {
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_ImageInfo >*
FilmsInfo_FilmInfo::mutable_image() {
  return &image_;
}

// -------------------------------------------------------------------

// FilmsInfo

// repeated .Mcsf.FilmsInfo.FilmInfo film = 1;
inline int FilmsInfo::film_size() const {
  return film_.size();
}
inline void FilmsInfo::clear_film() {
  film_.Clear();
}
inline const ::Mcsf::FilmsInfo_FilmInfo& FilmsInfo::film(int index) const {
  return film_.Get(index);
}
inline ::Mcsf::FilmsInfo_FilmInfo* FilmsInfo::mutable_film(int index) {
  return film_.Mutable(index);
}
inline ::Mcsf::FilmsInfo_FilmInfo* FilmsInfo::add_film() {
  return film_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_FilmInfo >&
FilmsInfo::film() const {
  return film_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mcsf::FilmsInfo_FilmInfo >*
FilmsInfo::mutable_film() {
  return &film_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mcsf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FilmsInfo_2eproto__INCLUDED
